diff --git a/buildsupport/other/pom.xml b/buildsupport/other/pom.xml
index f7b1a47e..7cba0ec7 100644
--- a/buildsupport/other/pom.xml
+++ b/buildsupport/other/pom.xml
@@ -69,12 +69,6 @@
       </dependency>
 
       <dependency>
-        <groupId>net.sf.ehcache</groupId>
-        <artifactId>ehcache-core</artifactId>
-        <version>2.5.1</version>
-      </dependency>
-
-      <dependency>
         <groupId>org.sonatype.sisu</groupId>
         <artifactId>sisu-resource-scanner</artifactId>
         <version>1.1</version>
@@ -111,9 +105,21 @@
       </dependency>
 
       <dependency>
+        <groupId>org.ehcache</groupId>
+        <artifactId>ehcache</artifactId>
+        <version>3.1.3</version>
+      </dependency>
+
+      <dependency>
         <groupId>com.hazelcast</groupId>
         <artifactId>hazelcast</artifactId>
-        <version>1.9.4.4</version>
+        <version>3.7.3</version>
+      </dependency>
+
+      <dependency>
+        <groupId>javax.cache</groupId>
+        <artifactId>cache-api</artifactId>
+        <version>1.0.0</version>
       </dependency>
 
       <dependency>
diff --git a/buildsupport/shiro/pom.xml b/buildsupport/shiro/pom.xml
index 9dd78b3f..caf01548 100644
--- a/buildsupport/shiro/pom.xml
+++ b/buildsupport/shiro/pom.xml
@@ -80,18 +80,6 @@
           </exclusion>
         </exclusions>
       </dependency>
-
-      <dependency>
-        <groupId>org.apache.shiro</groupId>
-        <artifactId>shiro-ehcache</artifactId>
-        <version>${apache-shiro.version}</version>
-        <exclusions>
-          <exclusion>
-            <groupId>net.sf.ehcache</groupId>
-            <artifactId>ehcache-core</artifactId>
-          </exclusion>
-        </exclusions>
-      </dependency>
     </dependencies>
   </dependencyManagement>
 
diff --git a/components/nexus-ehcache/pom.xml b/components/nexus-cache/pom.xml
similarity index 82%
rename from components/nexus-ehcache/pom.xml
rename to components/nexus-cache/pom.xml
index 9fe44550..b838e7b4 100644
--- a/components/nexus-ehcache/pom.xml
+++ b/components/nexus-cache/pom.xml
@@ -23,36 +23,31 @@
     <version>2.14.2-SNAPSHOT</version>
   </parent>
 
-  <artifactId>nexus-ehcache</artifactId>
+  <artifactId>nexus-cache</artifactId>
   <name>${project.groupId}:${project.artifactId}</name>
 
   <dependencies>
     <dependency>
-      <groupId>net.sf.ehcache</groupId>
-      <artifactId>ehcache-core</artifactId>
+      <groupId>org.sonatype.nexus</groupId>
+      <artifactId>nexus-hazelcast</artifactId>
     </dependency>
 
     <dependency>
-      <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-api</artifactId>
+      <groupId>javax.cache</groupId>
+      <artifactId>cache-api</artifactId>
     </dependency>
 
     <dependency>
-      <groupId>javax.inject</groupId>
-      <artifactId>javax.inject</artifactId>
-      <optional>true</optional>
+      <groupId>org.ehcache</groupId>
+      <artifactId>ehcache</artifactId>
     </dependency>
 
     <dependency>
-      <groupId>com.google.code.findbugs</groupId>
-      <artifactId>jsr305</artifactId>
-      <optional>true</optional>
+      <groupId>javax.inject</groupId>
+      <artifactId>javax.inject</artifactId>
+      <scope>provided</scope>
     </dependency>
 
-    <!--
-    FIXME: For some reason these are needed to be in non-test scope for the sisu index to generate :-(
-    -->
-
     <dependency>
       <groupId>org.eclipse.sisu</groupId>
       <artifactId>org.eclipse.sisu.inject</artifactId>
@@ -60,12 +55,18 @@
     </dependency>
 
     <dependency>
-      <groupId>org.sonatype.sisu</groupId>
-      <artifactId>sisu-guice</artifactId>
+      <groupId>org.sonatype.sisu.goodies</groupId>
+      <artifactId>goodies-common</artifactId>
       <scope>provided</scope>
     </dependency>
 
     <dependency>
+      <groupId>com.google.code.findbugs</groupId>
+      <artifactId>jsr305</artifactId>
+      <optional>true</optional>
+    </dependency>
+
+    <dependency>
       <groupId>org.sonatype.sisu.litmus</groupId>
       <artifactId>litmus-testsupport</artifactId>
       <scope>test</scope>
diff --git a/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/EhCacheManagerProvider.java b/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/EhCacheManagerProvider.java
new file mode 100644
index 00000000..6d84c218
--- /dev/null
+++ b/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/EhCacheManagerProvider.java
@@ -0,0 +1,116 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.sonatype.nexus.cache.internal;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+import javax.annotation.Nullable;
+import javax.annotation.PreDestroy;
+import javax.cache.CacheManager;
+import javax.cache.Caching;
+import javax.cache.spi.CachingProvider;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Throwables;
+import org.ehcache.jsr107.EhcacheCachingProvider;
+
+import static com.google.common.base.Preconditions.checkState;
+
+/**
+ * EhCache JCache {@link CacheManager} provider.
+ *
+ * Loads configuration from {@code etc/fabric/ehcache.xml} if missing will use {@code ehcache-default.xml} resource.
+ *
+ * @since 3.0
+ */
+@Named("ehcache")
+@Singleton
+public class EhCacheManagerProvider
+    extends ComponentSupport
+    implements Provider<CacheManager>
+{
+  private static final String CONFIG_FILE = "/ehcache.xml";
+
+  private static final String DEFAULT_CONFIG_FILE = "/org/sonatype/nexus/cache/internal/ehcache-default.xml";
+
+  private final ClassLoader classLoader;
+
+  private volatile CacheManager cacheManager;
+
+  @Inject
+  public EhCacheManagerProvider(@Nullable @Named("nexus-uber") final ClassLoader classLoader) {
+    this(classLoader, null);
+  }
+
+  @VisibleForTesting
+  public EhCacheManagerProvider(@Nullable @Named("nexus-uber") final ClassLoader classLoader, @Nullable URI uri) {
+    this.classLoader = classLoader == null ? EhCacheManagerProvider.class.getClassLoader() : classLoader;
+    this.cacheManager = create(uri);
+  }
+
+  private CacheManager create(@Nullable final URI uri) {
+    URI config = uri;
+    if (config == null) {
+      // load the configuration from defaults, this is mainly used for test environments
+      log.debug("Using default configuration");
+      URL url = getClass().getResource(CONFIG_FILE);
+      if (url == null) {
+        url = getClass().getResource(DEFAULT_CONFIG_FILE);
+      }
+      if (url == null) {
+        log.warn("Using default configuration");
+      }
+      else {
+        try {
+          config = url.toURI();
+        }
+        catch (URISyntaxException e) {
+          throw Throwables.propagate(e);
+        }
+      }
+    }
+
+    CachingProvider provider = Caching.getCachingProvider(
+        EhcacheCachingProvider.class.getName(),
+        EhcacheCachingProvider.class.getClassLoader()
+    );
+
+    log.info("Creating cache-manager with configuration: {}", config);
+    CacheManager manager = provider.getCacheManager(config, classLoader);
+    log.debug("Created cache-manager: {}", manager);
+    return manager;
+  }
+
+  @Override
+  public CacheManager get() {
+    checkState(cacheManager != null, "Cache-manager destroyed");
+    return cacheManager;
+  }
+
+  @PreDestroy
+  public void destroy() {
+    if (cacheManager != null) {
+      cacheManager.close();
+      log.info("Cache-manager closed");
+      cacheManager = null;
+    }
+  }
+}
\ No newline at end of file
diff --git a/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/HazelcastCacheManagerProvider.java b/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/HazelcastCacheManagerProvider.java
new file mode 100644
index 00000000..110b999a
--- /dev/null
+++ b/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/HazelcastCacheManagerProvider.java
@@ -0,0 +1,46 @@
+package org.sonatype.nexus.cache.internal;
+
+import javax.annotation.PreDestroy;
+import javax.cache.CacheManager;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import com.hazelcast.cache.impl.HazelcastServerCachingProvider;
+import com.hazelcast.core.HazelcastInstance;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Preconditions.checkState;
+
+@Singleton
+@Named("hazelcast")
+public class HazelcastCacheManagerProvider
+    extends ComponentSupport
+    implements Provider<CacheManager>
+{
+  private volatile CacheManager cacheManager;
+
+  @Inject
+  public HazelcastCacheManagerProvider(final HazelcastInstance hazelcastInstance) {
+    checkNotNull(hazelcastInstance);
+    this.cacheManager = HazelcastServerCachingProvider.createCachingProvider(hazelcastInstance).getCacheManager();
+  }
+
+  @Override
+  public CacheManager get() {
+    checkState(cacheManager != null, "Cache-manager destroyed");
+    return cacheManager;
+  }
+
+  @PreDestroy
+  public void destroy() {
+    if (cacheManager != null) {
+      cacheManager.close(); // does not shuts down provided HZ instance
+      log.info("Cache-manager closed");
+      cacheManager = null;
+    }
+  }
+}
diff --git a/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/RuntimeCacheManagerProvider.java b/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/RuntimeCacheManagerProvider.java
new file mode 100644
index 00000000..c9b8a56e
--- /dev/null
+++ b/components/nexus-cache/src/main/java/org/sonatype/nexus/cache/internal/RuntimeCacheManagerProvider.java
@@ -0,0 +1,67 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.sonatype.nexus.cache.internal;
+
+import java.util.Map;
+
+import javax.annotation.Nullable;
+import javax.cache.CacheManager;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Preconditions.checkState;
+
+/**
+ * Runtime {@link CacheManager} provider using {@code nexus.cache.provider}
+ * configuration to select the named cache provider to use.
+ *
+ * Defaults to {@code ehcache}.
+ *
+ * @since 3.0
+ */
+@Named("default")
+@Singleton
+public class RuntimeCacheManagerProvider
+    extends ComponentSupport
+    implements Provider<CacheManager>
+{
+  private final Map<String, Provider<CacheManager>> providers;
+
+  private final String name;
+
+  @Inject
+  public RuntimeCacheManagerProvider(final Map<String, Provider<CacheManager>> providers,
+                                     @Nullable @Named("${nexus.cache.provider:-ehcache}") final String customName)
+  {
+    this.providers = checkNotNull(providers);
+    this.name = checkNotNull(customName);
+    checkArgument(!"default".equals(name));
+    log.info("Cache-provider: {}", name);
+    checkState(providers.containsKey(name), "Missing cache-provider: %s", name);
+  }
+
+  @Override
+  public CacheManager get() {
+    Provider<CacheManager> provider = providers.get(name);
+    checkState(provider != null, "Cache-provider vanished: %s", name);
+    CacheManager manager = provider.get();
+    log.debug("Constructed cache-manager: {} -> {}", name, manager);
+    return manager;
+  }
+}
\ No newline at end of file
diff --git a/components/nexus-cache/src/main/resources/org/sonatype/nexus/cache/internal/ehcache-default.xml b/components/nexus-cache/src/main/resources/org/sonatype/nexus/cache/internal/ehcache-default.xml
new file mode 100644
index 00000000..2ca42a91
--- /dev/null
+++ b/components/nexus-cache/src/main/resources/org/sonatype/nexus/cache/internal/ehcache-default.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Sonatype Nexus (TM) Open Source Version
+    Copyright (c) 2008-present Sonatype, Inc.
+    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+
+    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+
+    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+    Eclipse Foundation. All other trademarks are the property of their respective owners.
+
+-->
+<config
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns="http://www.ehcache.org/v3"
+    xmlns:jsr107="http://www.ehcache.org/v3/jsr107"
+    xsi:schemaLocation="
+      http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.1.xsd
+      http://www.ehcache.org/v3/jsr107 http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd">
+
+  <!--
+  Enable JSR107 JCache defaultsL this means you can size JCaches via EhCache config, something JCache API does not allow.
+  -->
+  <service>
+    <jsr107:defaults enable-management="true" enable-statistics="true"/>
+  </service>
+
+  <!--
+  Shiro session cache
+  Note: this cache MUST NOT EXPIRE entries, it will do Shiro, otherwise spurious "unknown session" errors will happen
+  TBD: cache should grow, overflow to disk (was like it in older setup)
+  -->
+  <cache alias="shiro-activeSessionCache">
+    <expiry>
+      <none/>
+    </expiry>
+    <resources>
+      <heap unit="entries">10000</heap>
+    </resources>
+  </cache>
+</config>
diff --git a/components/nexus-core/pom.xml b/components/nexus-core/pom.xml
index 439987be..b42a6cc8 100644
--- a/components/nexus-core/pom.xml
+++ b/components/nexus-core/pom.xml
@@ -250,7 +250,12 @@
 
     <dependency>
       <groupId>org.sonatype.nexus</groupId>
-      <artifactId>nexus-ehcache</artifactId>
+      <artifactId>nexus-cache</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.sonatype.nexus</groupId>
+      <artifactId>nexus-hazelcast</artifactId>
     </dependency>
 
     <dependency>
diff --git a/components/nexus-core/src/main/java/com/walmart/warm/hazelcast/lifecycle/HazelcastLifecycle.java b/components/nexus-core/src/main/java/com/walmart/warm/hazelcast/lifecycle/HazelcastLifecycle.java
new file mode 100644
index 00000000..ff4cc082
--- /dev/null
+++ b/components/nexus-core/src/main/java/com/walmart/warm/hazelcast/lifecycle/HazelcastLifecycle.java
@@ -0,0 +1,43 @@
+/**
+ * Copyright (c) 2016-current Walmart, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package com.walmart.warm.hazelcast.lifecycle;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.sonatype.nexus.events.EventSubscriber;
+import org.sonatype.nexus.proxy.events.NexusStoppedEvent;
+
+import com.google.common.eventbus.Subscribe;
+import com.walmart.warm.hazelcast.HazelcastManager;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/**
+ * Lifecycle of {@link HazelcastManager} based on Nexus eventing.
+ *
+ * @since 1.2.14
+ */
+@Named
+@Singleton
+public class HazelcastLifecycle
+    implements EventSubscriber
+{
+  private final HazelcastManager hazelcastManager;
+
+  @Inject
+  public HazelcastLifecycle(final HazelcastManager hazelcastManager) {
+    this.hazelcastManager = checkNotNull(hazelcastManager);
+  }
+
+  @Subscribe
+  public void on(final NexusStoppedEvent event) {
+    hazelcastManager.shutdown();
+  }
+}
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/AbstractPathCache.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/AbstractPathCache.java
index d9b09862..adf0f6a5 100644
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/AbstractPathCache.java
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/AbstractPathCache.java
@@ -34,12 +34,12 @@ public abstract class AbstractPathCache
   }
 
   @Override
-  public final void put(final String path, final Object element) {
+  public final void put(final String path, final Boolean element) {
     doPut(makeKeyFromPath(path), element, -1);
   }
 
   @Override
-  public final void put(final String path, final Object element, final int expiration) {
+  public final void put(final String path, final Boolean element, final int expiration) {
     doPut(makeKeyFromPath(path), element, expiration);
   }
 
@@ -94,7 +94,7 @@ public abstract class AbstractPathCache
 
   protected abstract long doGetExpirationTime(String key);
 
-  protected abstract void doPut(String key, Object element, int expiration);
+  protected abstract void doPut(String key, Boolean element, int expiration);
 
   protected abstract boolean doRemove(String key);
 
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/CacheManager.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/CacheManager.java
index 3114dd86..50a32c70 100644
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/CacheManager.java
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/CacheManager.java
@@ -12,7 +12,9 @@
  */
 package org.sonatype.nexus.proxy.cache;
 
+import org.sonatype.nexus.proxy.repository.Repository;
+
 public interface CacheManager
 {
-  PathCache getPathCache(String cache);
+  PathCache getPathCache(Repository repository);
 }
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/EhCacheCacheManager.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/EhCacheCacheManager.java
deleted file mode 100644
index 36025160..00000000
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/EhCacheCacheManager.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.nexus.proxy.cache;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-import javax.inject.Singleton;
-
-import org.sonatype.nexus.proxy.events.NexusStoppedEvent;
-import org.sonatype.sisu.goodies.common.ComponentSupport;
-import org.sonatype.sisu.goodies.eventbus.EventBus;
-
-import com.google.common.eventbus.Subscribe;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-/**
- * The Class EhCacheCacheManager is a thin wrapper around EhCache, just to make things going.
- *
- * @author cstamas
- */
-@Named
-@Singleton
-public class EhCacheCacheManager
-    extends ComponentSupport
-    implements CacheManager
-{
-  private final net.sf.ehcache.CacheManager cacheManager;
-
-  public static final String SINGLE_PATH_CACHE_NAME = "nx-repository-path-cache";
-
-  @Inject
-  public EhCacheCacheManager(final EventBus eventBus, final net.sf.ehcache.CacheManager cacheManager) {
-    eventBus.register(this);
-    this.cacheManager = checkNotNull(cacheManager);
-  }
-
-  public synchronized PathCache getPathCache(String cache) {
-    if (!cacheManager.cacheExists(SINGLE_PATH_CACHE_NAME)) {
-      cacheManager.addCache(SINGLE_PATH_CACHE_NAME);
-    }
-
-    return new EhCachePathCache(cache, cacheManager.getEhcache(SINGLE_PATH_CACHE_NAME));
-  }
-
-  @Subscribe
-  public void on(final NexusStoppedEvent event) {
-    cacheManager.shutdown();
-  }
-}
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/EhCachePathCache.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/EhCachePathCache.java
deleted file mode 100644
index c20e4135..00000000
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/EhCachePathCache.java
+++ /dev/null
@@ -1,170 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.nexus.proxy.cache;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import org.sonatype.nexus.proxy.item.RepositoryItemUid;
-
-import com.google.common.base.Preconditions;
-import net.sf.ehcache.Ehcache;
-import net.sf.ehcache.Element;
-import net.sf.ehcache.Statistics;
-
-/**
- * The Class EhCacheCache is a thin wrapper around EHCache just to make things going.
- *
- * @author cstamas
- */
-public class EhCachePathCache
-    extends AbstractPathCache
-{
-  private final String _repositoryId;
-
-  /**
-   * The ec.
-   */
-  private final Ehcache _ec;
-
-  /**
-   * Instantiates a new eh cache cache.
-   *
-   * @param cache the cache
-   */
-  public EhCachePathCache(final String repositoryId, final Ehcache cache) {
-    this._repositoryId = Preconditions.checkNotNull(repositoryId);
-    this._ec = Preconditions.checkNotNull(cache);
-  }
-
-  protected String getRepositoryId() {
-    return _repositoryId;
-  }
-
-  protected Ehcache getEHCache() {
-    return _ec;
-  }
-
-  @Override
-  public boolean doContains(final String key) {
-    return getEHCache().get(key) != null;
-  }
-
-  @Override
-  public boolean doIsExpired(final String key) {
-    if (getEHCache().isKeyInCache(key)) {
-      Element el = getEHCache().get(key);
-      if (el != null) {
-        return el.isExpired();
-      }
-      else {
-        return true;
-      }
-    }
-    else {
-      return false;
-    }
-  }
-
-  @Override
-  public long doGetExpirationTime(final String key) {
-    final Element el = getEHCache().get(key);
-    if (el != null) {
-      return el.getExpirationTime();
-    }
-    else {
-      return -1;
-    }
-  }
-
-  @Override
-  public void doPut(final String key, final Object element, final int expiration) {
-    Element el = new Element(key, element);
-    if (expiration > -1) {
-      el.setTimeToLive(expiration);
-    }
-    getEHCache().put(el);
-  }
-
-  @Override
-  public boolean doRemove(String key) {
-    return getEHCache().remove(key);
-  }
-
-  @Override
-  public boolean removeWithChildren(String path) {
-    @SuppressWarnings("unchecked")
-    List<String> keys = getEHCache().getKeys();
-
-    String keyToRemove = makeKeyFromPath(path);
-
-    boolean removed = false;
-    for (String key : keys) {
-      if (key.startsWith(keyToRemove)) {
-        removed = getEHCache().remove(key) || removed;
-      }
-    }
-    return removed;
-  }
-
-  @Override
-  public boolean doPurge() {
-    // getEHCache().removeAll();
-    // getEHCache().flush();
-
-    // this above is not true anymore, since the "shared-cache" implementor forgot about the fact that using purge()
-    // will purge _all_ caches (it purges the one shared!), not just this repo's cache
-    return removeWithChildren(RepositoryItemUid.PATH_ROOT);
-  }
-
-  @Override
-  public CacheStatistics getStatistics() {
-    Statistics stats = getEHCache().getStatistics();
-
-    return new CacheStatistics(stats.getObjectCount(), stats.getCacheMisses(), stats.getCacheHits());
-  }
-
-  @SuppressWarnings("unchecked")
-  @Override
-  public Collection<String> listKeysInCache() {
-    getEHCache().evictExpiredElements();
-
-    List<String> keys = new ArrayList<String>();
-
-    // this is going to be slow (if we have lots of items) but if you are concerned about speed you shouldn't call
-    // this method anyway, this should only be used for information purposes
-
-    String startsWithString = getKeyPrefix();
-
-    for (String key : (List<String>) getEHCache().getKeys()) {
-      if (key.startsWith(startsWithString)) {
-        keys.add(key.substring(startsWithString.length()));
-      }
-    }
-
-    return keys;
-  }
-
-  @Override
-  protected String makeKeyFromPath(String path) {
-    path = super.makeKeyFromPath(path);
-
-    return getKeyPrefix() + path;
-  }
-
-  protected String getKeyPrefix() {
-    return getRepositoryId() + ":";
-  }
-
-}
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/JCacheCacheManager.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/JCacheCacheManager.java
new file mode 100644
index 00000000..a6e8e455
--- /dev/null
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/JCacheCacheManager.java
@@ -0,0 +1,83 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.sonatype.nexus.proxy.cache;
+
+import java.util.concurrent.TimeUnit;
+
+import javax.cache.Cache;
+import javax.cache.configuration.Factory;
+import javax.cache.configuration.MutableConfiguration;
+import javax.cache.expiry.CreatedExpiryPolicy;
+import javax.cache.expiry.Duration;
+import javax.cache.expiry.ExpiryPolicy;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.sonatype.nexus.proxy.repository.Repository;
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+@Named
+@Singleton
+public class JCacheCacheManager
+    extends ComponentSupport
+    implements CacheManager
+{
+  private final javax.cache.CacheManager cacheManager;
+
+  @Inject
+  public JCacheCacheManager(final javax.cache.CacheManager cacheManager) {
+    this.cacheManager = checkNotNull(cacheManager);
+  }
+
+  public synchronized PathCache getPathCache(final Repository repository) {
+    final String cacheName = "nx-nfc#" + repository.getId();
+    int ttl = repository.getNotFoundCacheTimeToLive();
+    PathCache oldCache = repository.getNotFoundCache();
+    if (oldCache == null || oldCache.ttl() != ttl) {
+      if (oldCache != null) {
+        oldCache.destroy();
+      }
+      Cache<String, Boolean> cache = cacheManager.getCache(cacheName, String.class, Boolean.class);
+      if (cache == null) {
+        MutableConfiguration<String, Boolean> cacheConfig = new MutableConfiguration<>();
+        cacheConfig.setTypes(String.class, Boolean.class);
+        cacheConfig.setStoreByValue(false);
+
+        Factory<? extends ExpiryPolicy> expiryPolicyFactory;
+        if (ttl < 0) {
+          // -1: eternal
+          expiryPolicyFactory = CreatedExpiryPolicy.factoryOf(Duration.ETERNAL);
+        }
+        else if (ttl == 0) {
+          // 0: immediate expiration: zero
+          expiryPolicyFactory = CreatedExpiryPolicy.factoryOf(Duration.ZERO);
+        }
+        else {
+          expiryPolicyFactory = CreatedExpiryPolicy.factoryOf(new Duration(TimeUnit.MINUTES, ttl));
+        }
+        cacheConfig.setExpiryPolicyFactory(expiryPolicyFactory);
+        cacheConfig.setManagementEnabled(true);
+        cacheConfig.setStatisticsEnabled(true);
+        cache = cacheManager.createCache(cacheName, cacheConfig);
+        log.info("Created path cache {}, TTL {}", cacheName, ttl);
+      }
+      return new JCachePathCache(cache, ttl);
+    }
+    else {
+      return oldCache;
+    }
+  }
+}
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/JCachePathCache.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/JCachePathCache.java
new file mode 100644
index 00000000..4644ac39
--- /dev/null
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/JCachePathCache.java
@@ -0,0 +1,120 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.sonatype.nexus.proxy.cache;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+
+import javax.cache.Cache;
+import javax.cache.Cache.Entry;
+
+import org.sonatype.nexus.proxy.item.RepositoryItemUid;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/**
+ * HZ cache backed cache.
+ *
+ * @author cstamas
+ */
+public class JCachePathCache
+    extends AbstractPathCache
+{
+  private final Cache<String, Boolean> cache;
+
+  private final int ttl;
+
+  public JCachePathCache(final Cache<String, Boolean> cache, final int ttl) {
+    this.cache = checkNotNull(cache);
+    this.ttl = ttl;
+  }
+
+  @Override
+  public int ttl() {
+    return ttl;
+  }
+
+  @Override
+  public boolean doContains(final String key) {
+    return cache.containsKey(key);
+  }
+
+  @Override
+  public boolean doIsExpired(final String key) {
+    return !cache.containsKey(key);
+  }
+
+  @Override
+  public long doGetExpirationTime(final String key) {
+    // TODO: JCache API cannot do this: get expiration time of this, it'd need verndor specific calls!
+    return System.currentTimeMillis() + ttl; // TODO: we lie
+  }
+
+  @Override
+  public void doPut(final String key, final Boolean element, final int expiration) {
+    cache.put(key, element);
+  }
+
+  @Override
+  public boolean doRemove(String key) {
+    return cache.remove(key);
+  }
+
+  @Override
+  public boolean removeWithChildren(String path) {
+    Collection<String> keys = listKeysInCache();
+    String keyToRemove = makeKeyFromPath(path);
+    boolean removed = false;
+    for (String key : keys) {
+      if (key.startsWith(keyToRemove)) {
+        removed = cache.remove(key) || removed;
+      }
+    }
+    return removed;
+  }
+
+  @Override
+  public boolean doPurge() {
+    // getEHCache().removeAll();
+    // getEHCache().flush();
+
+    // this above is not true anymore, since the "shared-cache" implementor forgot about the fact that using purge()
+    // will purge _all_ caches (it purges the one shared!), not just this repo's cache
+    return removeWithChildren(RepositoryItemUid.PATH_ROOT);
+  }
+
+  @Override
+  public CacheStatistics getStatistics() {
+    return new CacheStatistics(0, 0, 0);
+  }
+
+  @SuppressWarnings("unchecked")
+  @Override
+  public Collection<String> listKeysInCache() {
+    Iterator<Entry<String, Boolean>> entryIterator = cache.iterator();
+    ArrayList<String> keys = new ArrayList<>();
+    while (entryIterator.hasNext()) {
+      Entry<String, Boolean> entry = entryIterator.next();
+      if (entry != null) {
+        keys.add(entry.getKey());
+      }
+    }
+    return keys;
+  }
+
+  @Override
+  public void destroy() {
+    cache.close();
+  }
+}
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCache.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCache.java
index 06196eb4..52c4bab3 100644
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCache.java
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCache.java
@@ -12,6 +12,7 @@
  */
 package org.sonatype.nexus.proxy.cache;
 
+import java.io.Closeable;
 import java.util.Collection;
 
 /**
@@ -21,6 +22,8 @@ import java.util.Collection;
  */
 public interface PathCache
 {
+  int ttl();
+
   boolean contains(String path);
 
   boolean isExpired(String path);
@@ -35,11 +38,13 @@ public interface PathCache
 
   boolean purge();
 
-  void put(String path, Object element);
+  void put(String path, Boolean element);
 
-  void put(String path, Object element, int expirationSeconds);
+  void put(String path, Boolean element, int expirationSeconds);
 
   CacheStatistics getStatistics();
 
   Collection<String> listKeysInCache();
+
+  void destroy();
 }
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCacheEventInspector.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCacheEventInspector.java
index 25cf4872..cf3da195 100644
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCacheEventInspector.java
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/cache/PathCacheEventInspector.java
@@ -51,12 +51,12 @@ public class PathCacheEventInspector
   @AllowConcurrentEvents
   public void inspect(final RepositoryRegistryEventRemove removedRepositoryEvent) {
     final Repository removedRepository = removedRepositoryEvent.getRepository();
-    final PathCache pathCache = cacheManager.getPathCache(removedRepository.getId());
+    final PathCache pathCache = cacheManager.getPathCache(removedRepository);
     if (log.isDebugEnabled()) {
       log.debug(
-          "Purging NFC PathCache of repository {}",
+          "Removing NFC PathCache of repository {}",
           RepositoryStringUtils.getHumanizedNameString(removedRepository));
     }
-    pathCache.purge();
+    pathCache.destroy();
   }
 }
diff --git a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/repository/AbstractRepository.java b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/repository/AbstractRepository.java
index b2122d69..2e2d7c6e 100644
--- a/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/repository/AbstractRepository.java
+++ b/components/nexus-core/src/main/java/org/sonatype/nexus/proxy/repository/AbstractRepository.java
@@ -215,9 +215,8 @@ public abstract class AbstractRepository
       throws ConfigurationException
   {
     super.doConfigure();
-    if (notFoundCache == null) {
-      this.notFoundCache = cacheManager.getPathCache(getId());
-    }
+    // TODO: to support TTL updates, as JCache does not support per-entry TTL
+    this.notFoundCache = cacheManager.getPathCache(this);
   }
 
   @Override
diff --git a/components/nexus-core/src/main/resources/ehcache-default.xml b/components/nexus-core/src/main/resources/ehcache-default.xml
deleted file mode 100644
index 70641e48..00000000
--- a/components/nexus-core/src/main/resources/ehcache-default.xml
+++ /dev/null
@@ -1,361 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-
-    Sonatype Nexus (TM) Open Source Version
-    Copyright (c) 2008-present Sonatype, Inc.
-    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
-
-    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
-    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
-
-    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
-    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
-    Eclipse Foundation. All other trademarks are the property of their respective owners.
-
--->
-<ehcache updateCheck="false">
-
-    <!-- all created caches shares these defaults
-
-            memoryStoreEvictionPolicy= ("LRU"|"LFU"|"FIFO")
-	      LRU - least recently used
-	      LFU - least frequently used
-	      FIFO - first in first out
-    -->
-    <defaultCache
-            maxElementsInMemory="1000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-    <cache name="nx-repository-path-cache"
-            maxElementsInMemory="100000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-    <cache name="shiro-activeSessionCache"
-            maxElementsInMemory="10000"
-            eternal="true"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-    <!--
-    DiskStore configuration
-
-    Sets the path to the directory where cache files are created.
-
-    If the path is a Java System Property it is replaced by its value in the
-    running VM.
-
-    The following properties are translated:
-    * user.home - User's home directory
-    * user.dir - User's current working directory
-    * java.io.tmpdir - Default temp file path
-
-    Subdirectories can be specified below the property e.g. java.io.tmpdir/one
-    <diskStore path="basedir/nexus-work/proxy/ehcache"/>
-    -->
-
-    <!--
-    Specifies a CacheManagerEventListenerFactory, be used to create a CacheManagerPeerProvider,
-    which is notified when Caches are added or removed from the CacheManager.
-
-    The attributes of CacheManagerEventListenerFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Sets the fully qualified class name to be registered as the CacheManager event listener.
-
-    The events include:
-    * adding a Cache
-    * removing a Cache
-
-    Callbacks to listener methods are synchronous and unsynchronized. It is the responsibility
-    of the implementer to safely handle the potential performance and thread safety issues
-    depending on what their listener is doing.
-
-    If no class is specified, no listener is created. There is no default.
-
-    <cacheManagerEventListenerFactory class="" properties=""/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerProviderFactory which will be used to create a
-    CacheManagerPeerProvider, which discovers other CacheManagers in the cluster.
-
-    The attributes of cacheManagerPeerProviderFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system with two means of discovery of
-    CacheManager peers participating in the cluster:
-    * automatic, using a multicast group. This one automatically discovers peers and detects
-      changes such as peers entering and leaving the group
-    * manual, using manual rmiURL configuration. A hardcoded list of peers is provided at
-      configuration time.
-
-    Configuring Automatic Discovery:
-    Automatic discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory
-                        class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                        properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1,
-                                    multicastGroupPort=4446, timeToLive=32"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "automatic"
-    * multicastGroupAddress (mandatory) - specify a valid multicast group address
-    * multicastGroupPort (mandatory) - specify a dedicated port for the multicast heartbeat
-      traffic
-    * timeToLive - specify a value between 0 and 255 which determines how far the packets will propagate.
-      By convention, the restrictions are:
-      0   - the same host
-      1   - the same subnet
-      32  - the same site
-      64  - the same region
-      128 - the same continent
-      255 - unrestricted
-
-
-    Configuring Manual Discovery:
-    Manual discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-                          "net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                          properties="peerDiscovery=manual,
-                          rmiUrls=//server1:40000/sampleCache1|//server2:40000/sampleCache1
-                          | //server1:40000/sampleCache2|//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * rmiUrls (mandatory) - specify a pipe separated list of rmiUrls, in the form
-                            //hostname:port
-
-    The hostname is the hostname of the remote CacheManager peer. The port is the listening
-    port of the RMICacheManagerPeerListener of the remote CacheManager peer.
-
-    An alternate CacheManagerPeerProviderFactory can be used for JNDI discovery of other
-    CacheManagers in the cluster. Only manual discovery is supported.
-
-    For cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-
-    Correspondingly for cacheManagerPeerListenerFactory specify class
-    net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactoryory.
-
-    Configuring JNDI Manual Discovery:
-    Manual JNDI discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-        "net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory"
-        properties="peerDiscovery=manual, stashContexts=true, stashRemoteCachePeers=true,
-              jndiUrls=t3//server1:40000/sampleCache1|t3//server2:40000/sampleCache1
-              |t3//server1:40000/sampleCache2|t3//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * stashContexts (optional) - specify "true" or "false".  Defaults to true.
-      java.naming.Context objects are stashed for performance.
-    * stashRemoteCachePeers (optional) - specify "true" or "false".  Defaults to true.
-      CachePeer objects are stashed for performance.
-    * jndiUrls (mandatory) - specify a pipe separated list of jndiUrls,
-      in the form protocol//hostname:port
-
-    <cacheManagerPeerProviderFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-            properties="peerDiscovery=automatic,
-                        multicastGroupAddress=230.0.0.1,
-                        multicastGroupPort=4446, timeToLive=1"/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerListenerFactory which will be used to create a
-    CacheManagerPeerListener, which
-    listens for messages from cache replicators participating in the cluster.
-
-    The attributes of cacheManagerPeerListenerFactory are:
-    class - a fully qualified factory class name
-    properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system. The listener component is
-    RMICacheManagerPeerListener which is configured using
-    RMICacheManagerPeerListenerFactory. It is configured as per the following example:
-
-    <cacheManagerPeerListenerFactory
-        class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
-        properties="hostName=fully_qualified_hostname_or_ip,
-                    port=40001,
-                    socketTimeoutMillis=120000"/>
-
-    All properties are optional. They are:
-    * hostName - the hostName of the host the listener is running on. Specify
-      where the host is multihomed and you want to control the interface over which cluster
-      messages are received. Defaults to the host name of the default interface if not
-      specified.
-    * port - the port the listener listens on. This defaults to a free port if not specified.
-    * socketTimeoutMillis - the number of ms client sockets will stay open when sending
-      messages to the listener. This should be long enough for the slowest message.
-      If not specified it defaults 120000ms.
-
-
-    An alternate CacheManagerPeerListenerFactory can be also be used for JNDI binding of
-    listeners for messages from cache replicators participating in the cluster. For
-    cacheManagerPeerListenerFactory specify
-    class net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactory.
-    Correspondingly for cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-    Properties for JNDIRMICacheManagerPeerListenerFactory are the same as
-    RMICacheManagerPeerListenerFactory.
-
-
-    <cacheManagerPeerListenerFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"/>
-    -->
-
-
-    <!-- Cache configuration.
-
-    The following attributes are required.
-
-    name:
-    Sets the name of the cache. This is used to identify the cache. It must be unique.
-
-    maxElementsInMemory:
-    Sets the maximum number of objects that will be created in memory
-
-	maxElementsOnDisk:
-    Sets the maximum number of objects that will be maintained in the DiskStore
-	The default value is zero, meaning unlimited.
-
-    eternal:
-    Sets whether elements are eternal. If eternal,  timeouts are ignored and the
-    element is never expired.
-
-    overflowToDisk:
-    Sets whether elements can overflow to disk when the in-memory cache
-    has reached the maxInMemory limit.
-
-    The following attributes are optional.
-
-    timeToIdleSeconds:
-    Sets the time to idle for an element before it expires.
-    i.e. The maximum amount of time between accesses before an element expires
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that an Element can idle for infinity.
-    The default value is 0.
-
-    timeToLiveSeconds:
-    Sets the time to live for an element before it expires.
-    i.e. The maximum time between creation time and when an element expires.
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that and Element can live for infinity.
-    The default value is 0.
-
-    diskPersistent:
-    Whether the disk store persists between restarts of the Virtual Machine.
-    The default value is false.
-
-    diskExpiryThreadIntervalSeconds:
-    The number of seconds between runs of the disk expiry thread. The default value
-    is 120 seconds.
-
-    memoryStoreEvictionPolicy:
-    Policy would be enforced upon reaching the maxElementsInMemory limit. Default
-    policy is Least Recently Used (specified as LRU). Other policies available -
-    First In First Out (specified as FIFO) and Less Frequently Used
-    (specified as LFU)
-
-    Cache elements can also contain sub elements which take the same format of a factory class
-    and properties. Defined sub-elements are:
-
-    * cacheEventListenerFactory - Enables registration of listeners for cache events, such as
-      put, remove, update, and expire.
-
-    * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
-      cache on initialisation to prepopulate itself.
-
-    Each cache that will be distributed needs to set a cache event listener which replicates
-    messages to the other CacheManager peers. For the built-in RMI implementation this is done
-    by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
-    distributed cache's configuration as per the following example:
-
-    <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
-         properties="replicateAsynchronously=true,
-         replicatePuts=true,
-         replicateUpdates=true,
-         replicateUpdatesViaCopy=true,
-         replicateRemovals=true "/>
-
-    The RMICacheReplicatorFactory recognises the following properties:
-
-    * replicatePuts=true|false - whether new elements placed in a cache are
-      replicated to others. Defaults to true.
-
-    * replicateUpdates=true|false - whether new elements which override an
-      element already existing with the same key are replicated. Defaults to true.
-
-    * replicateRemovals=true - whether element removals are replicated. Defaults to true.
-
-    * replicateAsynchronously=true | false - whether replications are
-      asynchronous (true) or synchronous (false). Defaults to true.
-
-    * replicateUpdatesViaCopy=true | false - whether the new elements are
-      copied to other caches (true), or whether a remove message is sent. Defaults to true.
-
-
-    * asynchronousReplicationIntervalMillis=<number of milliseconds> - The asynchronous
-      replicator runs at a set interval of milliseconds. The default is 1000. The minimum
-      is 10. This property is only applicable if replicateAsynchronously=true
-
-
-    The RMIBootstrapCacheLoader bootstraps caches in clusters where RMICacheReplicators are
-    used. It is configured as per the following example:
-
-    <bootstrapCacheLoaderFactory
-        class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"
-        properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"/>
-
-    The RMIBootstrapCacheLoaderFactory recognises the following optional properties:
-
-    * bootstrapAsynchronously=true|false - whether the bootstrap happens in the background
-      after the cache has started. If false, bootstrapping must complete before the cache is
-      made available. The default value is true.
-
-    * maximumChunkSizeBytes=<integer> - Caches can potentially be very large, larger than the
-      memory limits of the VM. This property allows the bootstraper to fetched elements in
-      chunks. The default chunk size is 5000000 (5MB).
-
-    -->
-
-
-    <!--
-    Mandatory Default Cache configuration. These settings will be applied to caches
-    created programmtically using CacheManager.add(String cacheName)
-    <defaultCache
-            maxElementsInMemory="10000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="true"
-            maxElementsOnDisk="10000000"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LRU"
-            />
-    -->
-</ehcache>
diff --git a/components/nexus-core/src/main/resources/ehcache-failsafe.xml b/components/nexus-core/src/main/resources/ehcache-failsafe.xml
deleted file mode 100644
index 3343a8a5..00000000
--- a/components/nexus-core/src/main/resources/ehcache-failsafe.xml
+++ /dev/null
@@ -1,322 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-
-    Sonatype Nexus (TM) Open Source Version
-    Copyright (c) 2008-present Sonatype, Inc.
-    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
-
-    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
-    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
-
-    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
-    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
-    Eclipse Foundation. All other trademarks are the property of their respective owners.
-
--->
-<ehcache updateCheck="false">
-    <!--
-    DiskStore configuration
-
-    Sets the path to the directory where cache files are created.
-
-    If the path is a Java System Property it is replaced by its value in the
-    running VM.
-
-    The following properties are translated:
-    * user.home - User's home directory
-    * user.dir - User's current working directory
-    * java.io.tmpdir - Default temp file path
-
-    Subdirectories can be specified below the property e.g. java.io.tmpdir/one
-    -->
-    <diskStore path="java.io.tmpdir"/>
-
-    <!--
-    Specifies a CacheManagerEventListenerFactory, be used to create a CacheManagerPeerProvider,
-    which is notified when Caches are added or removed from the CacheManager.
-
-    The attributes of CacheManagerEventListenerFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Sets the fully qualified class name to be registered as the CacheManager event listener.
-
-    The events include:
-    * adding a Cache
-    * removing a Cache
-
-    Callbacks to listener methods are synchronous and unsynchronized. It is the responsibility
-    of the implementer to safely handle the potential performance and thread safety issues
-    depending on what their listener is doing.
-
-    If no class is specified, no listener is created. There is no default.
-
-    <cacheManagerEventListenerFactory class="" properties=""/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerProviderFactory which will be used to create a
-    CacheManagerPeerProvider, which discovers other CacheManagers in the cluster.
-
-    The attributes of cacheManagerPeerProviderFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system with two means of discovery of
-    CacheManager peers participating in the cluster:
-    * automatic, using a multicast group. This one automatically discovers peers and detects
-      changes such as peers entering and leaving the group
-    * manual, using manual rmiURL configuration. A hardcoded list of peers is provided at
-      configuration time.
-
-    Configuring Automatic Discovery:
-    Automatic discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory
-                        class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                        properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1,
-                                    multicastGroupPort=4446, timeToLive=32"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "automatic"
-    * multicastGroupAddress (mandatory) - specify a valid multicast group address
-    * multicastGroupPort (mandatory) - specify a dedicated port for the multicast heartbeat
-      traffic
-    * timeToLive - specify a value between 0 and 255 which determines how far the packets will propagate.
-      By convention, the restrictions are:
-      0   - the same host
-      1   - the same subnet
-      32  - the same site
-      64  - the same region
-      128 - the same continent
-      255 - unrestricted
-
-
-    Configuring Manual Discovery:
-    Manual discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-                          "net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                          properties="peerDiscovery=manual,
-                          rmiUrls=//server1:40000/sampleCache1|//server2:40000/sampleCache1
-                          | //server1:40000/sampleCache2|//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * rmiUrls (mandatory) - specify a pipe separated list of rmiUrls, in the form
-                            //hostname:port
-
-    The hostname is the hostname of the remote CacheManager peer. The port is the listening
-    port of the RMICacheManagerPeerListener of the remote CacheManager peer.
-
-    An alternate CacheManagerPeerProviderFactory can be used for JNDI discovery of other
-    CacheManagers in the cluster. Only manual discovery is supported.
-
-    For cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-
-    Correspondingly for cacheManagerPeerListenerFactory specify class
-    net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactoryory.
-
-    Configuring JNDI Manual Discovery:
-    Manual JNDI discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-        "net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory"
-        properties="peerDiscovery=manual, stashContexts=true, stashRemoteCachePeers=true,
-              jndiUrls=t3//server1:40000/sampleCache1|t3//server2:40000/sampleCache1
-              |t3//server1:40000/sampleCache2|t3//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * stashContexts (optional) - specify "true" or "false".  Defaults to true.
-      java.naming.Context objects are stashed for performance.
-    * stashRemoteCachePeers (optional) - specify "true" or "false".  Defaults to true.
-      CachePeer objects are stashed for performance.
-    * jndiUrls (mandatory) - specify a pipe separated list of jndiUrls,
-      in the form protocol//hostname:port
-
-    <cacheManagerPeerProviderFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-            properties="peerDiscovery=automatic,
-                        multicastGroupAddress=230.0.0.1,
-                        multicastGroupPort=4446, timeToLive=1"/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerListenerFactory which will be used to create a
-    CacheManagerPeerListener, which
-    listens for messages from cache replicators participating in the cluster.
-
-    The attributes of cacheManagerPeerListenerFactory are:
-    class - a fully qualified factory class name
-    properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system. The listener component is
-    RMICacheManagerPeerListener which is configured using
-    RMICacheManagerPeerListenerFactory. It is configured as per the following example:
-
-    <cacheManagerPeerListenerFactory
-        class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
-        properties="hostName=fully_qualified_hostname_or_ip,
-                    port=40001,
-                    socketTimeoutMillis=120000"/>
-
-    All properties are optional. They are:
-    * hostName - the hostName of the host the listener is running on. Specify
-      where the host is multihomed and you want to control the interface over which cluster
-      messages are received. Defaults to the host name of the default interface if not
-      specified.
-    * port - the port the listener listens on. This defaults to a free port if not specified.
-    * socketTimeoutMillis - the number of ms client sockets will stay open when sending
-      messages to the listener. This should be long enough for the slowest message.
-      If not specified it defaults 120000ms.
-
-
-    An alternate CacheManagerPeerListenerFactory can be also be used for JNDI binding of
-    listeners for messages from cache replicators participating in the cluster. For
-    cacheManagerPeerListenerFactory specify
-    class net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactory.
-    Correspondingly for cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-    Properties for JNDIRMICacheManagerPeerListenerFactory are the same as
-    RMICacheManagerPeerListenerFactory.
-
-
-    <cacheManagerPeerListenerFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"/>
-    -->
-
-
-    <!-- Cache configuration.
-
-    The following attributes are required.
-
-    name:
-    Sets the name of the cache. This is used to identify the cache. It must be unique.
-
-    maxElementsInMemory:
-    Sets the maximum number of objects that will be created in memory
-
-	maxElementsOnDisk:
-    Sets the maximum number of objects that will be maintained in the DiskStore
-	The default value is zero, meaning unlimited.
-
-    eternal:
-    Sets whether elements are eternal. If eternal,  timeouts are ignored and the
-    element is never expired.
-
-    overflowToDisk:
-    Sets whether elements can overflow to disk when the in-memory cache
-    has reached the maxInMemory limit.
-
-    The following attributes are optional.
-
-    timeToIdleSeconds:
-    Sets the time to idle for an element before it expires.
-    i.e. The maximum amount of time between accesses before an element expires
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that an Element can idle for infinity.
-    The default value is 0.
-
-    timeToLiveSeconds:
-    Sets the time to live for an element before it expires.
-    i.e. The maximum time between creation time and when an element expires.
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that and Element can live for infinity.
-    The default value is 0.
-
-    diskPersistent:
-    Whether the disk store persists between restarts of the Virtual Machine.
-    The default value is false.
-
-    diskExpiryThreadIntervalSeconds:
-    The number of seconds between runs of the disk expiry thread. The default value
-    is 120 seconds.
-
-    memoryStoreEvictionPolicy:
-    Policy would be enforced upon reaching the maxElementsInMemory limit. Default
-    policy is Least Recently Used (specified as LRU). Other policies available -
-    First In First Out (specified as FIFO) and Less Frequently Used
-    (specified as LFU)
-
-    Cache elements can also contain sub elements which take the same format of a factory class
-    and properties. Defined sub-elements are:
-
-    * cacheEventListenerFactory - Enables registration of listeners for cache events, such as
-      put, remove, update, and expire.
-
-    * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
-      cache on initialisation to prepopulate itself.
-
-    Each cache that will be distributed needs to set a cache event listener which replicates
-    messages to the other CacheManager peers. For the built-in RMI implementation this is done
-    by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
-    distributed cache's configuration as per the following example:
-
-    <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
-         properties="replicateAsynchronously=true,
-         replicatePuts=true,
-         replicateUpdates=true,
-         replicateUpdatesViaCopy=true,
-         replicateRemovals=true "/>
-
-    The RMICacheReplicatorFactory recognises the following properties:
-
-    * replicatePuts=true|false - whether new elements placed in a cache are
-      replicated to others. Defaults to true.
-
-    * replicateUpdates=true|false - whether new elements which override an
-      element already existing with the same key are replicated. Defaults to true.
-
-    * replicateRemovals=true - whether element removals are replicated. Defaults to true.
-
-    * replicateAsynchronously=true | false - whether replications are
-      asynchronous (true) or synchronous (false). Defaults to true.
-
-    * replicateUpdatesViaCopy=true | false - whether the new elements are
-      copied to other caches (true), or whether a remove message is sent. Defaults to true.
-
-
-    * asynchronousReplicationIntervalMillis=<number of milliseconds> - The asynchronous
-      replicator runs at a set interval of milliseconds. The default is 1000. The minimum
-      is 10. This property is only applicable if replicateAsynchronously=true
-
-
-    The RMIBootstrapCacheLoader bootstraps caches in clusters where RMICacheReplicators are
-    used. It is configured as per the following example:
-
-    <bootstrapCacheLoaderFactory
-        class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"
-        properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"/>
-
-    The RMIBootstrapCacheLoaderFactory recognises the following optional properties:
-
-    * bootstrapAsynchronously=true|false - whether the bootstrap happens in the background
-      after the cache has started. If false, bootstrapping must complete before the cache is
-      made available. The default value is true.
-
-    * maximumChunkSizeBytes=<integer> - Caches can potentially be very large, larger than the
-      memory limits of the VM. This property allows the bootstraper to fetched elements in
-      chunks. The default chunk size is 5000000 (5MB).
-
-    -->
-
-
-    <!--
-    Mandatory Default Cache configuration. These settings will be applied to caches
-    created programmtically using CacheManager.add(String cacheName)
-    -->
-    <defaultCache
-            maxElementsInMemory="10000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="true"
-            maxElementsOnDisk="10000000"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LRU"
-            />
-</ehcache>
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/M2RepositoryTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/M2RepositoryTest.java
index d89fb6b5..cd6802ab 100644
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/M2RepositoryTest.java
+++ b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/M2RepositoryTest.java
@@ -54,6 +54,7 @@ import org.junit.experimental.categories.Category;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
+import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
@@ -542,7 +543,7 @@ public class M2RepositoryTest
     // we have two known entries in NFC
     assertThat(m2Repo.getNotFoundCache().listKeysInCache().size(), equalTo(2));
     assertThat(m2Repo.getNotFoundCache().listKeysInCache(),
-        contains("some/path/file.jar", "some/path/maven-metadata.xml"));
+        containsInAnyOrder("some/path/file.jar", "some/path/maven-metadata.xml"));
 
     m2Repo.getRepositoryMetadataManager().expireNotFoundMetadataCaches(new ResourceStoreRequest("/"));
 
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryExpireCacheTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryExpireCacheTest.java
index 303f0c27..c2ae8ead 100644
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryExpireCacheTest.java
+++ b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryExpireCacheTest.java
@@ -19,10 +19,12 @@ import org.sonatype.nexus.proxy.repository.RepositoryWritePolicy;
 
 import org.junit.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.hasSize;
+
 public class RepositoryExpireCacheTest
     extends AbstractProxyTestEnvironment
 {
-
   private M2TestsuiteEnvironmentBuilder jettyTestsuiteEnvironmentBuilder;
 
   @Override
@@ -60,8 +62,7 @@ public class RepositoryExpireCacheTest
   {
     // make a bad request
     ResourceStoreRequest req = new ResourceStoreRequest(
-        "/activemq/activemq-core/1.2/activemq-core-1.2.jar-no-such",
-        false);
+        "/activemq/activemq-core/1.2/activemq-core-1.2.jar-no-such");
 
     try {
       getRepository().retrieveItem(req);
@@ -71,7 +72,7 @@ public class RepositoryExpireCacheTest
     }
 
     // make another bad request
-    req = new ResourceStoreRequest("/activemq1/activemq-core/1.2/activemq-core-1.2.jar-no-such", false);
+    req = new ResourceStoreRequest("/activemq1/activemq-core/1.2/activemq-core-1.2.jar-no-such");
 
     try {
       getRepository().retrieveItem(req);
@@ -80,17 +81,18 @@ public class RepositoryExpireCacheTest
       // good, but now we have NFC filled with stuff
     }
 
+    // TODO: omit stats, use listKeys instead
     // we have now two items in NFC
-    assertEquals(2L, getRepository().getNotFoundCache().getStatistics().getSize());
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(2));
 
     // remove one
     getRepository().expireCaches(new ResourceStoreRequest("/activemq1/activemq-core", true));
 
-    assertEquals(1L, getRepository().getNotFoundCache().getStatistics().getSize());
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(1));
 
     getRepository().expireCaches(new ResourceStoreRequest("/", true));
 
-    assertEquals(0L, getRepository().getNotFoundCache().getStatistics().getSize());
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(0));
 
     retrieveItem();
   }
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryRequestAsExpiredTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryRequestAsExpiredTest.java
index ee5a5cc3..c3c841bc 100644
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryRequestAsExpiredTest.java
+++ b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/RepositoryRequestAsExpiredTest.java
@@ -150,25 +150,25 @@ public class RepositoryRequestAsExpiredTest
     // do a request, as server does only 404s it should get into NFC
     retrieveItem(false);
     assertThat(record.getRequests(), hasSize(1));
-    assertThat(getRepository().getNotFoundCache().getStatistics().getSize(), equalTo(1L));
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(1));
     record.clear();
 
     // do 2nd request, path is already in NFC, no remote call should happen
     retrieveItem(false);
     assertThat(record.getRequests(), hasSize(0));
-    assertThat(getRepository().getNotFoundCache().getStatistics().getSize(), equalTo(1L));
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(1));
     record.clear();
 
     // do 3rd request "as expired", path should remain in NFC, but remote request should happen
     retrieveItem(true);
     assertThat(record.getRequests(), hasSize(1));
-    assertThat(getRepository().getNotFoundCache().getStatistics().getSize(), equalTo(1L));
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(1));
     record.clear();
 
     // do 4th request, path is already in NFC, no remote call should happen
     retrieveItem(false);
     assertThat(record.getRequests(), hasSize(0));
-    assertThat(getRepository().getNotFoundCache().getStatistics().getSize(), equalTo(1L));
+    assertThat(getRepository().getNotFoundCache().listKeysInCache(), hasSize(1));
     record.clear();
   }
 }
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/EhCachePathCacheTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/EhCachePathCacheTest.java
deleted file mode 100644
index dd31895a..00000000
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/EhCachePathCacheTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.nexus.proxy.cache;
-
-import java.util.List;
-
-import net.sf.ehcache.Ehcache;
-import net.sf.ehcache.Element;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
-
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-/**
- * Tests for {@link EhCachePathCache}.
- */
-@RunWith(MockitoJUnitRunner.class)
-public class EhCachePathCacheTest
-{
-
-  @Captor
-  ArgumentCaptor<Element> elementCaptor;
-
-  @Mock
-  Ehcache ehcache;
-
-  /**
-   * Related to NEXUS-5166, since ehcache 2.5
-   */
-  @Test
-  public void doPutOnlySetsTimeToLiveOnElementsWhenExpirationGreaterThanNegOne() {
-
-    EhCachePathCache cache = spy(new EhCachePathCache("fake", ehcache));
-    when(cache.getEHCache()).thenReturn(ehcache);
-
-    cache.put("path1", new Object(), -2);
-    cache.put("path2", new Object(), -1);
-    cache.put("path3", new Object(), 0);
-    cache.put("path4", new Object(), 1);
-    cache.put("path5", new Object(), 10000);
-
-    verify(cache, times(5)).getEHCache();
-    verify(ehcache, times(5)).put(elementCaptor.capture());
-
-    List<Element> elements = elementCaptor.getAllValues();
-    assertThat(elements.get(0).getTimeToLive(), equalTo(0));
-    assertThat(elements.get(1).getTimeToLive(), equalTo(0));
-    assertThat(elements.get(2).getTimeToLive(), equalTo(0));
-    assertThat(elements.get(3).getTimeToLive(), equalTo(1));
-    assertThat(elements.get(4).getTimeToLive(), equalTo(10000));
-
-  }
-}
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/EhCacheCacheManagerTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/JCacheCacheManagerTest.java
similarity index 87%
rename from components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/EhCacheCacheManagerTest.java
rename to components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/JCacheCacheManagerTest.java
index 2cbdfa78..1e8ce206 100644
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/EhCacheCacheManagerTest.java
+++ b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/cache/JCacheCacheManagerTest.java
@@ -15,12 +15,25 @@ package org.sonatype.nexus.proxy.cache;
 import java.util.Collection;
 
 import org.sonatype.nexus.proxy.AbstractNexusTestEnvironment;
+import org.sonatype.nexus.proxy.repository.Repository;
 
+import org.junit.Before;
 import org.junit.Test;
 
-public class EhCacheCacheManagerTest
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class JCacheCacheManagerTest
     extends AbstractNexusTestEnvironment
 {
+  Repository test;
+
+  @Before
+  public void mockRepository() {
+    test = mock(Repository.class);
+    when(test.getId()).thenReturn("test");
+    when(test.getNotFoundCacheTimeToLive()).thenReturn(1440);
+  }
 
   @Test
   public void testGetCache()
@@ -28,7 +41,7 @@ public class EhCacheCacheManagerTest
   {
     CacheManager cm = lookup(CacheManager.class);
 
-    PathCache c = cm.getPathCache("test");
+    PathCache c = cm.getPathCache(test);
 
     assertEquals(true, null != c);
   }
@@ -39,7 +52,7 @@ public class EhCacheCacheManagerTest
   {
     CacheManager cm = lookup(CacheManager.class);
 
-    PathCache c = cm.getPathCache("test");
+    PathCache c = cm.getPathCache(test);
 
     c.put("/com", Boolean.TRUE);
     c.put("/com/sonatype", Boolean.TRUE);
@@ -69,7 +82,7 @@ public class EhCacheCacheManagerTest
   {
     CacheManager cm = lookup(CacheManager.class);
 
-    PathCache c = cm.getPathCache("test");
+    PathCache c = cm.getPathCache(test);
 
     c.put("/com", Boolean.TRUE);
     c.put("/com/sonatype", Boolean.TRUE);
@@ -107,7 +120,7 @@ public class EhCacheCacheManagerTest
   {
     CacheManager cm = lookup(CacheManager.class);
 
-    PathCache c = cm.getPathCache("test");
+    PathCache c = cm.getPathCache(test);
 
     c.put("/com/", Boolean.TRUE);
     assertTrue(c.contains("/com/"));
@@ -133,7 +146,7 @@ public class EhCacheCacheManagerTest
 
     CacheManager cm = lookup(CacheManager.class);
 
-    PathCache c = cm.getPathCache("test");
+    PathCache c = cm.getPathCache(test);
 
     c.put("/com/", Boolean.TRUE);
     c.put("/com/sonatype", Boolean.TRUE);
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/repository/DefaultRepositoryConfiguratorTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/repository/DefaultRepositoryConfiguratorTest.java
index 05d83277..571be58a 100644
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/repository/DefaultRepositoryConfiguratorTest.java
+++ b/components/nexus-core/src/test/java/org/sonatype/nexus/proxy/repository/DefaultRepositoryConfiguratorTest.java
@@ -49,7 +49,7 @@ public class DefaultRepositoryConfiguratorTest
 
     oldRepository.configure(cRepo);
 
-    oldRepository.getNotFoundCache().put("test-path", "test-object");
+    oldRepository.getNotFoundCache().put("test-path", Boolean.TRUE);
 
     // make sure the item is in NFC
     Assert.assertTrue(oldRepository.getNotFoundCache().contains("test-path"));
@@ -84,7 +84,7 @@ public class DefaultRepositoryConfiguratorTest
 
     oldRepository.configure(cRepo);
 
-    oldRepository.getNotFoundCache().put("test-path", "test-object");
+    oldRepository.getNotFoundCache().put("test-path", Boolean.TRUE);
 
     // make sure the item is in NFC
     // (cache is disabled )
diff --git a/components/nexus-core/src/test/java/org/sonatype/nexus/security/UserPrincipalsHelperTest.java b/components/nexus-core/src/test/java/org/sonatype/nexus/security/UserPrincipalsHelperTest.java
index 4f4e031e..63b19609 100644
--- a/components/nexus-core/src/test/java/org/sonatype/nexus/security/UserPrincipalsHelperTest.java
+++ b/components/nexus-core/src/test/java/org/sonatype/nexus/security/UserPrincipalsHelperTest.java
@@ -36,7 +36,6 @@ import com.google.inject.AbstractModule;
 import com.google.inject.Module;
 import com.google.inject.name.Names;
 import junit.framework.Assert;
-import net.sf.ehcache.CacheManager;
 import org.apache.shiro.authc.AuthenticationInfo;
 import org.apache.shiro.authc.AuthenticationToken;
 import org.apache.shiro.authc.SimpleAuthenticationInfo;
@@ -101,7 +100,6 @@ public class UserPrincipalsHelperTest
   {
     try {
       ThreadContext.remove();
-      lookup(CacheManager.class).shutdown();
     }
     finally {
       super.tearDown();
diff --git a/components/nexus-core/src/test/resources/ehcache.xml b/components/nexus-core/src/test/resources/ehcache.xml
deleted file mode 100644
index 5b32b59b..00000000
--- a/components/nexus-core/src/test/resources/ehcache.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<ehcache updateCheck="false">
-    
-    <defaultCache
-            maxElementsInMemory="1000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-    <cache name="nx-repository-path-cache"
-            maxElementsInMemory="100000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-</ehcache>
diff --git a/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerComponent.java b/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerComponent.java
deleted file mode 100644
index dc50d9dd..00000000
--- a/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerComponent.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.sisu.ehcache;
-
-import net.sf.ehcache.CacheManager;
-
-/**
- * Provider responsible for creation, configuration and keeping a shared singleton EHCache CacheManager instance.
- *
- * @deprecated Inject {@link CacheManager} instead, this component exists only to shutdown and its used poorly.
- */
-@Deprecated
-public interface CacheManagerComponent
-{
-  /**
-   * Returns the pre-configured singleton instance of CacheManager.
-   */
-  CacheManager getCacheManager();
-
-  /**
-   * Cleanly shutdown the pre-configured singleton instance.
-   */
-  void shutdown();
-}
diff --git a/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerComponentImpl.java b/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerComponentImpl.java
deleted file mode 100644
index 863417d7..00000000
--- a/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerComponentImpl.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.sisu.ehcache;
-
-import java.io.File;
-import java.io.IOException;
-import java.lang.management.ManagementFactory;
-import java.net.URL;
-
-import javax.annotation.Nullable;
-import javax.inject.Inject;
-import javax.inject.Named;
-import javax.inject.Singleton;
-import javax.management.MBeanServer;
-
-import com.google.common.annotations.VisibleForTesting;
-import net.sf.ehcache.CacheManager;
-import net.sf.ehcache.config.Configuration;
-import net.sf.ehcache.config.ConfigurationFactory;
-import net.sf.ehcache.management.ManagementService;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Default implementation of {@link CacheManagerComponent}.
- *
- * Note: as SISU-93 is not yet here, and this component does need explicit shutdown
- * (in case when multiple instances are re-created of it, like in UT environment),
- * you have to use {@link #shutdown()} method.
- */
-@Named
-@Singleton
-public class CacheManagerComponentImpl
-    implements CacheManagerComponent
-{
-  private static final Logger logger = LoggerFactory.getLogger(CacheManagerComponentImpl.class);
-
-  private CacheManager cacheManager;
-
-  @Inject
-  public CacheManagerComponentImpl() throws IOException {
-    this(null);
-  }
-
-  @VisibleForTesting
-  public CacheManagerComponentImpl(final @Nullable File file) throws IOException {
-    this.cacheManager = createCacheManager(file);
-
-    try {
-      final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
-      ManagementService.registerMBeans(cacheManager, mBeanServer, false, false, true, true);
-    }
-    catch (Exception e) {
-      logger.warn("Failed to register mbean: {}", e.toString());
-    }
-  }
-
-  @Override
-  public CacheManager getCacheManager() {
-    return cacheManager;
-  }
-
-  @Override
-  public synchronized void shutdown() {
-    if (cacheManager != null) {
-      logger.info("Shutting down");
-      cacheManager.shutdown();
-      cacheManager = null;
-    }
-  }
-
-  @Override
-  public void finalize() throws Throwable {
-    try {
-      shutdown();
-    }
-    finally {
-      super.finalize();
-    }
-  }
-
-  private CacheManager createCacheManager(final @Nullable File file) throws IOException {
-    URL url;
-    if (file != null) {
-      url = file.toURI().toURL();
-    }
-    else {
-      url = getClass().getResource("/ehcache.xml");
-      if (url == null) {
-        url = getClass().getResource("/ehcache-default.xml");
-      }
-    }
-
-    if (url == null) {
-      logger.warn("No configuration found; using defaults");
-      return new CacheManager();
-    }
-
-    logger.info("Loading configuration from: {}", url);
-    Configuration configuration = ConfigurationFactory.parseConfiguration(url);
-    configuration.setUpdateCheck(false);
-    return new CacheManager(configuration);
-  }
-}
diff --git a/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerProvider.java b/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerProvider.java
deleted file mode 100644
index 88f1f61a..00000000
--- a/components/nexus-ehcache/src/main/java/org/sonatype/sisu/ehcache/CacheManagerProvider.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.sisu.ehcache;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-import javax.inject.Provider;
-import javax.inject.Singleton;
-
-import net.sf.ehcache.CacheManager;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-/**
- * {@link CacheManager} provider.
- *
- * @since 2.8
- */
-@Named
-@Singleton
-public class CacheManagerProvider
-  implements Provider<CacheManager>
-{
-  private final CacheManagerComponent factory;
-
-  @Inject
-  public CacheManagerProvider(final CacheManagerComponent factory) {
-    this.factory = checkNotNull(factory);
-  }
-
-  @Override
-  public CacheManager get() {
-    return factory.getCacheManager();
-  }
-}
diff --git a/components/nexus-ehcache/src/test/java/org/sonatype/sisu/ehcache/CacheManagerComponentImplTest.java b/components/nexus-ehcache/src/test/java/org/sonatype/sisu/ehcache/CacheManagerComponentImplTest.java
deleted file mode 100644
index 4cc8774b..00000000
--- a/components/nexus-ehcache/src/test/java/org/sonatype/sisu/ehcache/CacheManagerComponentImplTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.sonatype.sisu.ehcache;
-
-import java.io.File;
-
-import org.sonatype.sisu.litmus.testsupport.TestSupport;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.is;
-
-/**
- * Test for {@link CacheManagerComponentImpl}.
- */
-public class CacheManagerComponentImplTest
-    extends TestSupport
-{
-  private CacheManagerComponent underTest;
-
-  private String originalTmpDir = System.getProperty("java.io.tmpdir");
-
-  @Before
-  public void setUp() throws Exception {
-    System.setProperty("java.io.tmpdir", util.getTmpDir().getAbsolutePath());
-  }
-
-  @After
-  public void tearDown() throws Exception {
-    if (underTest != null) {
-      underTest.shutdown();
-      underTest = null;
-    }
-
-    System.setProperty("java.io.tmpdir", originalTmpDir);
-  }
-
-  @Test
-  public void testConfigFromClasspath() throws Exception {
-    underTest = new CacheManagerComponentImpl(null);
-    assertConfigurationValid();
-  }
-
-  @Test
-  public void testConfigFromFile() throws Exception {
-    File file = util.resolveFile("src/test/resources/ehcache.xml");
-    underTest = new CacheManagerComponentImpl(file);
-    assertConfigurationValid();
-  }
-
-  private void assertConfigurationValid() {
-    String path = underTest.getCacheManager().getDiskStorePath();
-    File file = new File(path);
-
-    assertThat(file.isAbsolute(), is(true));
-    assertThat(file.getAbsolutePath(), is(new File(util.getTmpDir(), "ehcache").getAbsolutePath()));
-  }
-}
diff --git a/components/nexus-ehcache/src/test/resources/ehcache.xml b/components/nexus-ehcache/src/test/resources/ehcache.xml
deleted file mode 100644
index 99606574..00000000
--- a/components/nexus-ehcache/src/test/resources/ehcache.xml
+++ /dev/null
@@ -1,341 +0,0 @@
-<!--
-
-    Copyright (c) 2007-2012 Sonatype, Inc. All rights reserved.
-
-    This program is licensed to you under the Apache License Version 2.0,
-    and you may not use this file except in compliance with the Apache License Version 2.0.
-    You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
-
-    Unless required by applicable law or agreed to in writing,
-    software distributed under the Apache License Version 2.0 is distributed on an
-    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
-
--->
-<ehcache>
-    <diskStore path="java.io.tmpdir/ehcache"/>
-    
-    <!-- all created caches shares these defaults 
-
-            memoryStoreEvictionPolicy= ("LRU"|"LFU"|"FIFO")
-	      LRU - least recently used
-	      LFU - least frequently used
-	      FIFO - first in first out
-    -->
-    <defaultCache
-            maxElementsInMemory="10000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="true"
-            maxElementsOnDisk="10000000"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-    <!--
-    DiskStore configuration
-
-    Sets the path to the directory where cache files are created.
-
-    If the path is a Java System Property it is replaced by its value in the
-    running VM.
-
-    The following properties are translated:
-    * user.home - User's home directory
-    * user.dir - User's current working directory
-    * java.io.tmpdir - Default temp file path
-
-    Subdirectories can be specified below the property e.g. java.io.tmpdir/one
-    <diskStore path="basedir/nexus-work/proxy/ehcache"/>
-    -->
-
-    <!--
-    Specifies a CacheManagerEventListenerFactory, be used to create a CacheManagerPeerProvider,
-    which is notified when Caches are added or removed from the CacheManager.
-
-    The attributes of CacheManagerEventListenerFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Sets the fully qualified class name to be registered as the CacheManager event listener.
-
-    The events include:
-    * adding a Cache
-    * removing a Cache
-
-    Callbacks to listener methods are synchronous and unsynchronized. It is the responsibility
-    of the implementer to safely handle the potential performance and thread safety issues
-    depending on what their listener is doing.
-
-    If no class is specified, no listener is created. There is no default.
-
-    <cacheManagerEventListenerFactory class="" properties=""/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerProviderFactory which will be used to create a
-    CacheManagerPeerProvider, which discovers other CacheManagers in the cluster.
-
-    The attributes of cacheManagerPeerProviderFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system with two means of discovery of
-    CacheManager peers participating in the cluster:
-    * automatic, using a multicast group. This one automatically discovers peers and detects
-      changes such as peers entering and leaving the group
-    * manual, using manual rmiURL configuration. A hardcoded list of peers is provided at
-      configuration time.
-
-    Configuring Automatic Discovery:
-    Automatic discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory
-                        class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                        properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1,
-                                    multicastGroupPort=4446, timeToLive=32"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "automatic"
-    * multicastGroupAddress (mandatory) - specify a valid multicast group address
-    * multicastGroupPort (mandatory) - specify a dedicated port for the multicast heartbeat
-      traffic
-    * timeToLive - specify a value between 0 and 255 which determines how far the packets will propagate.
-      By convention, the restrictions are:
-      0   - the same host
-      1   - the same subnet
-      32  - the same site
-      64  - the same region
-      128 - the same continent
-      255 - unrestricted
-
-
-    Configuring Manual Discovery:
-    Manual discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-                          "net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                          properties="peerDiscovery=manual,
-                          rmiUrls=//server1:40000/sampleCache1|//server2:40000/sampleCache1
-                          | //server1:40000/sampleCache2|//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * rmiUrls (mandatory) - specify a pipe separated list of rmiUrls, in the form
-                            //hostname:port
-
-    The hostname is the hostname of the remote CacheManager peer. The port is the listening
-    port of the RMICacheManagerPeerListener of the remote CacheManager peer.
-
-    An alternate CacheManagerPeerProviderFactory can be used for JNDI discovery of other
-    CacheManagers in the cluster. Only manual discovery is supported.
-
-    For cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-
-    Correspondingly for cacheManagerPeerListenerFactory specify class
-    net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactoryory.
-
-    Configuring JNDI Manual Discovery:
-    Manual JNDI discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-        "net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory"
-        properties="peerDiscovery=manual, stashContexts=true, stashRemoteCachePeers=true,
-              jndiUrls=t3//server1:40000/sampleCache1|t3//server2:40000/sampleCache1
-              |t3//server1:40000/sampleCache2|t3//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * stashContexts (optional) - specify "true" or "false".  Defaults to true.
-      java.naming.Context objects are stashed for performance.
-    * stashRemoteCachePeers (optional) - specify "true" or "false".  Defaults to true.
-      CachePeer objects are stashed for performance.
-    * jndiUrls (mandatory) - specify a pipe separated list of jndiUrls,
-      in the form protocol//hostname:port
-
-    <cacheManagerPeerProviderFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-            properties="peerDiscovery=automatic,
-                        multicastGroupAddress=230.0.0.1,
-                        multicastGroupPort=4446, timeToLive=1"/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerListenerFactory which will be used to create a
-    CacheManagerPeerListener, which
-    listens for messages from cache replicators participating in the cluster.
-
-    The attributes of cacheManagerPeerListenerFactory are:
-    class - a fully qualified factory class name
-    properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system. The listener component is
-    RMICacheManagerPeerListener which is configured using
-    RMICacheManagerPeerListenerFactory. It is configured as per the following example:
-
-    <cacheManagerPeerListenerFactory
-        class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
-        properties="hostName=fully_qualified_hostname_or_ip,
-                    port=40001,
-                    socketTimeoutMillis=120000"/>
-
-    All properties are optional. They are:
-    * hostName - the hostName of the host the listener is running on. Specify
-      where the host is multihomed and you want to control the interface over which cluster
-      messages are received. Defaults to the host name of the default interface if not
-      specified.
-    * port - the port the listener listens on. This defaults to a free port if not specified.
-    * socketTimeoutMillis - the number of ms client sockets will stay open when sending
-      messages to the listener. This should be long enough for the slowest message.
-      If not specified it defaults 120000ms.
-
-
-    An alternate CacheManagerPeerListenerFactory can be also be used for JNDI binding of
-    listeners for messages from cache replicators participating in the cluster. For
-    cacheManagerPeerListenerFactory specify
-    class net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactory.
-    Correspondingly for cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-    Properties for JNDIRMICacheManagerPeerListenerFactory are the same as
-    RMICacheManagerPeerListenerFactory.
-
-
-    <cacheManagerPeerListenerFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"/>
-    -->
-
-
-    <!-- Cache configuration.
-
-    The following attributes are required.
-
-    name:
-    Sets the name of the cache. This is used to identify the cache. It must be unique.
-
-    maxElementsInMemory:
-    Sets the maximum number of objects that will be created in memory
-
-	maxElementsOnDisk:
-    Sets the maximum number of objects that will be maintained in the DiskStore
-	The default value is zero, meaning unlimited.
-
-    eternal:
-    Sets whether elements are eternal. If eternal,  timeouts are ignored and the
-    element is never expired.
-
-    overflowToDisk:
-    Sets whether elements can overflow to disk when the in-memory cache
-    has reached the maxInMemory limit.
-
-    The following attributes are optional.
-
-    timeToIdleSeconds:
-    Sets the time to idle for an element before it expires.
-    i.e. The maximum amount of time between accesses before an element expires
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that an Element can idle for infinity.
-    The default value is 0.
-
-    timeToLiveSeconds:
-    Sets the time to live for an element before it expires.
-    i.e. The maximum time between creation time and when an element expires.
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that and Element can live for infinity.
-    The default value is 0.
-
-    diskPersistent:
-    Whether the disk store persists between restarts of the Virtual Machine.
-    The default value is false.
-
-    diskExpiryThreadIntervalSeconds:
-    The number of seconds between runs of the disk expiry thread. The default value
-    is 120 seconds.
-
-    memoryStoreEvictionPolicy:
-    Policy would be enforced upon reaching the maxElementsInMemory limit. Default
-    policy is Least Recently Used (specified as LRU). Other policies available -
-    First In First Out (specified as FIFO) and Less Frequently Used
-    (specified as LFU)
-
-    Cache elements can also contain sub elements which take the same format of a factory class
-    and properties. Defined sub-elements are:
-
-    * cacheEventListenerFactory - Enables registration of listeners for cache events, such as
-      put, remove, update, and expire.
-
-    * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
-      cache on initialisation to prepopulate itself.
-
-    Each cache that will be distributed needs to set a cache event listener which replicates
-    messages to the other CacheManager peers. For the built-in RMI implementation this is done
-    by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
-    distributed cache's configuration as per the following example:
-
-    <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
-         properties="replicateAsynchronously=true,
-         replicatePuts=true,
-         replicateUpdates=true,
-         replicateUpdatesViaCopy=true,
-         replicateRemovals=true "/>
-
-    The RMICacheReplicatorFactory recognises the following properties:
-
-    * replicatePuts=true|false - whether new elements placed in a cache are
-      replicated to others. Defaults to true.
-
-    * replicateUpdates=true|false - whether new elements which override an
-      element already existing with the same key are replicated. Defaults to true.
-
-    * replicateRemovals=true - whether element removals are replicated. Defaults to true.
-
-    * replicateAsynchronously=true | false - whether replications are
-      asynchronous (true) or synchronous (false). Defaults to true.
-
-    * replicateUpdatesViaCopy=true | false - whether the new elements are
-      copied to other caches (true), or whether a remove message is sent. Defaults to true.
-
-
-    * asynchronousReplicationIntervalMillis=<number of milliseconds> - The asynchronous
-      replicator runs at a set interval of milliseconds. The default is 1000. The minimum
-      is 10. This property is only applicable if replicateAsynchronously=true
-
-
-    The RMIBootstrapCacheLoader bootstraps caches in clusters where RMICacheReplicators are
-    used. It is configured as per the following example:
-
-    <bootstrapCacheLoaderFactory
-        class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"
-        properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"/>
-
-    The RMIBootstrapCacheLoaderFactory recognises the following optional properties:
-
-    * bootstrapAsynchronously=true|false - whether the bootstrap happens in the background
-      after the cache has started. If false, bootstrapping must complete before the cache is
-      made available. The default value is true.
-
-    * maximumChunkSizeBytes=<integer> - Caches can potentially be very large, larger than the
-      memory limits of the VM. This property allows the bootstraper to fetched elements in
-      chunks. The default chunk size is 5000000 (5MB).
-
-    -->
-
-
-    <!--
-    Mandatory Default Cache configuration. These settings will be applied to caches
-    created programmtically using CacheManager.add(String cacheName)
-    <defaultCache
-            maxElementsInMemory="10000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="true"
-            maxElementsOnDisk="10000000"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LRU"
-            />
-    -->
-</ehcache>
diff --git a/components/nexus-hazelcast/pom.xml b/components/nexus-hazelcast/pom.xml
new file mode 100644
index 00000000..9cda1a6b
--- /dev/null
+++ b/components/nexus-hazelcast/pom.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (c) 2016-current Walmart, Inc.
+    All rights reserved. This program and the accompanying materials
+    are made available under the terms of the Eclipse Public License v1.0
+    which accompanies this distribution, and is available at
+    http://www.eclipse.org/legal/epl-v10.html
+
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.sonatype.nexus</groupId>
+    <artifactId>nexus-components</artifactId>
+    <version>2.14.2-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>nexus-hazelcast</artifactId>
+  <name>${project.groupId}:${project.artifactId}</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>javax.inject</groupId>
+      <artifactId>javax.inject</artifactId>
+      <scope>provided</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>org.eclipse.sisu</groupId>
+      <artifactId>org.eclipse.sisu.inject</artifactId>
+      <scope>provided</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>org.sonatype.sisu.goodies</groupId>
+      <artifactId>goodies-common</artifactId>
+      <scope>provided</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>com.hazelcast</groupId>
+      <artifactId>hazelcast</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.sonatype.nexus</groupId>
+      <artifactId>nexus-test-common</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+</project>
diff --git a/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/HazelcastConfigParticipant.java b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/HazelcastConfigParticipant.java
new file mode 100644
index 00000000..4381755c
--- /dev/null
+++ b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/HazelcastConfigParticipant.java
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) 2016-current Walmart, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package com.walmart.warm.hazelcast;
+
+import com.hazelcast.config.Config;
+
+/**
+ * Implementations of this component may alter or verify that Hazelcast configuration contains needed elements.
+ *
+ * @since 1.2.14
+ */
+public interface HazelcastConfigParticipant
+{
+  /**
+   * Applies needed changes to loaded up Hazelcast configuration by mutating whatever is needed by given participant.
+   * The passed in {@code config} is never {@code null}.
+   */
+  void apply(Config config);
+}
diff --git a/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/HazelcastManager.java b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/HazelcastManager.java
new file mode 100644
index 00000000..b707b8ad
--- /dev/null
+++ b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/HazelcastManager.java
@@ -0,0 +1,55 @@
+/**
+ * Copyright (c) 2016-current Walmart, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package com.walmart.warm.hazelcast;
+
+import java.io.File;
+import java.util.List;
+
+import javax.annotation.Nullable;
+
+import com.hazelcast.core.HazelcastInstance;
+
+/**
+ * Manager of {@link HazelcastInstance}s.
+ *
+ * @since 1.2.14
+ */
+public interface HazelcastManager
+{
+  /**
+   * Returns a singleton/shared {@link HazelcastInstance}.
+   *
+   * Instance is created on-demand, first caller will actually initiate the instance creation.
+   */
+  HazelcastInstance sharedInstance();
+
+  /**
+   * Shut down the shared instance if it exists.
+   */
+  void shutdown();
+
+  /**
+   * Returns a new {@link HazelcastInstance}, created with passed configuration, classloader and
+   * configuration participants (may be empty list). Caller of this method <b>must ensure</b> that instance will be
+   * properly shut down once not needed or system is shut down (caller is responsible for instance lifecycle too).
+   * Configuration file may be {@code null}, but other parameters may not.
+   * <p>
+   * Note: if you have {@code null} configFile, then consider using shared instance returned
+   * by {@link #sharedInstance()} method, instead of creating new Hazelcast instance, as in that case, discovery will
+   * be used from Nexus default Hazelcast configuration, and your instance will join the cluster too (if there is one).
+   * Still, having multiple Hazelcast instances per JVM is completely valid.
+   *
+   * @param configFile                The {@link File} pointing at Hazelcast XML configuration file, may be {@code
+   *                                  null}.
+   * @param classLoader               The classloader to apply on Hazelcast.
+   * @param configurationParticipants The non-{@code null} list of {@link HazelcastConfigParticipant}, or empty list.
+   */
+  HazelcastInstance newInstance(@Nullable final File configFile,
+                                final ClassLoader classLoader,
+                                final List<HazelcastConfigParticipant> configurationParticipants);
+}
diff --git a/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastInstanceImplProvider.java b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastInstanceImplProvider.java
new file mode 100644
index 00000000..36ecf232
--- /dev/null
+++ b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastInstanceImplProvider.java
@@ -0,0 +1,60 @@
+/**
+ * Copyright (c) 2016-current Walmart, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package com.walmart.warm.hazelcast.internal;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+import com.hazelcast.core.HazelcastInstance;
+import com.hazelcast.instance.HazelcastInstanceImpl;
+import com.hazelcast.instance.HazelcastInstanceProxy;
+import org.eclipse.sisu.Typed;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/**
+ * Provides access to {@link HazelcastInstanceImpl}.
+ *
+ * This is for special use-only.
+ *
+ * @since 1.8
+ */
+@Named
+@Singleton
+@Typed(HazelcastInstanceImpl.class)
+@SuppressWarnings("CdiTypedAnnotationInspection")
+public class HazelcastInstanceImplProvider
+    implements Provider<HazelcastInstanceImpl>
+{
+  private final Provider<HazelcastInstance> hazelcastInstance;
+
+  @Inject
+  public HazelcastInstanceImplProvider(final Provider<HazelcastInstance> hazelcastInstance) {
+    this.hazelcastInstance = checkNotNull(hazelcastInstance);
+  }
+
+  /**
+   * Try to convert {@link HazelcastInstance} to {@link HazelcastInstanceImpl}.
+   *
+   * @throws RuntimeException Unable to convert
+   */
+  @Override
+  public HazelcastInstanceImpl get() {
+    HazelcastInstance instance = hazelcastInstance.get();
+    if (instance instanceof HazelcastInstanceProxy) {
+      return ((HazelcastInstanceProxy) instance).getOriginal();
+    }
+    else if (instance instanceof HazelcastInstanceImpl) {
+      return (HazelcastInstanceImpl)instance;
+    }
+
+    throw new RuntimeException("Unable to convert HazelcastInstance to HazelcastInstanceImpl; found type: " + instance.getClass().getName());
+  }
+}
diff --git a/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastInstanceProvider.java b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastInstanceProvider.java
new file mode 100644
index 00000000..d964900c
--- /dev/null
+++ b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastInstanceProvider.java
@@ -0,0 +1,40 @@
+/**
+ * Copyright (c) 2016-current Walmart, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package com.walmart.warm.hazelcast.internal;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+import com.hazelcast.core.HazelcastInstance;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/**
+ * Provider of shared {@link HazelcastInstance}.
+ *
+ * @since 1.2.14
+ */
+@Named
+@Singleton
+public class HazelcastInstanceProvider
+    implements Provider<HazelcastInstance>
+{
+  private final HazelcastManagerImpl hazelcastManager;
+
+  @Inject
+  public HazelcastInstanceProvider(final HazelcastManagerImpl hazelcastManager) {
+    this.hazelcastManager = checkNotNull(hazelcastManager);
+  }
+
+  @Override
+  public HazelcastInstance get() {
+    return hazelcastManager.sharedInstance();
+  }
+}
diff --git a/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastManagerImpl.java b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastManagerImpl.java
new file mode 100644
index 00000000..1e5c7ca0
--- /dev/null
+++ b/components/nexus-hazelcast/src/main/java/com/walmart/warm/hazelcast/internal/HazelcastManagerImpl.java
@@ -0,0 +1,152 @@
+/**
+ * Copyright (c) 2016-current Walmart, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package com.walmart.warm.hazelcast.internal;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.List;
+
+import javax.annotation.Nullable;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import com.google.common.base.Throwables;
+import com.hazelcast.config.Config;
+import com.hazelcast.config.ConfigXmlGenerator;
+import com.hazelcast.config.FileSystemXmlConfig;
+import com.hazelcast.config.XmlConfigBuilder;
+import com.hazelcast.core.Hazelcast;
+import com.hazelcast.core.HazelcastInstance;
+import com.walmart.warm.hazelcast.HazelcastConfigParticipant;
+import com.walmart.warm.hazelcast.HazelcastManager;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/**
+ * Manager of {@link HazelcastInstance}s.
+ *
+ * @since 1.2.14
+ */
+@Named
+@Singleton
+public class HazelcastManagerImpl
+    extends ComponentSupport
+    implements HazelcastManager
+{
+  @Nullable
+  private final File configFile;
+
+  private final List<HazelcastConfigParticipant> configurationParticipants;
+
+  private final ClassLoader classLoader;
+
+  private HazelcastInstance sharedInstance;
+
+  @Inject
+  public HazelcastManagerImpl(@Nullable @Named("hazelcast.config") final File configFile,
+                              final List<HazelcastConfigParticipant> configurationParticipants,
+                              @Nullable @Named("nexus-uber") final ClassLoader classLoader)
+  {
+    this.configFile = configFile;
+    this.configurationParticipants = checkNotNull(configurationParticipants);
+    // TODO: hack to make it out of nexus-core scope (mainly in tests)
+    this.classLoader = classLoader == null ? HazelcastManager.class.getClassLoader() : classLoader;
+
+    log.info("Configuration file: {}", configFile);
+  }
+
+  /**
+   * Returns a singleton/shared {@link HazelcastInstance}.
+   *
+   * Instance is created on-demand, first caller will actually initiate the instance creation.
+   */
+  @Override
+  public synchronized HazelcastInstance sharedInstance() {
+    if (sharedInstance == null) {
+      sharedInstance = newInstance(configFile, classLoader, configurationParticipants);
+      log.info("Created shared instance");
+    }
+    return sharedInstance;
+  }
+
+  /**
+   * Shut down the shared instance if it exists.
+   */
+  @Override
+  public synchronized void shutdown() {
+    if (sharedInstance != null) {
+      log.info("Shutting down shared instance");
+      sharedInstance.shutdown();
+      sharedInstance = null;
+      log.info("Shut down");
+    }
+  }
+
+  /**
+   * Returns a new {@link HazelcastInstance}, created with passed configuration, classloader and
+   * configuration participants (may be empty list). Caller of this method <b>must ensure</b> that instance will be
+   * properly shut down once not needed or system is shut down (caller is responsible for instance lifecycle too).
+   * Configuration file may be {@code null}, but other parameters may not.
+   * <p>
+   * Note: if you have {@code null} configFile, then consider using shared instance returned
+   * by {@link #sharedInstance()} method, instead of creating new Hazelcast instance, as in that case, discovery will
+   * be used from Nexus default Hazelcast configuration, and your instance will join the cluster too (if there is one).
+   * Still, having multiple Hazelcast instances per JVM is completely valid.
+   *
+   * @param configFile                The {@link File} pointing at Hazelcast XML configuration file, may be {@code null}.
+   * @param classLoader               The classloader to apply on Hazelcast.
+   * @param configurationParticipants The non-{@code null} list of {@link HazelcastConfigParticipant}, or empty list.
+   */
+  @Override
+  public HazelcastInstance newInstance(@Nullable final File configFile,
+                                       final ClassLoader classLoader,
+                                       final List<HazelcastConfigParticipant> configurationParticipants)
+  {
+    Config config = getHazelcastConfig(configFile, classLoader, configurationParticipants);
+
+    // maybe dump configuration to log
+    if (log.isTraceEnabled()) {
+      ConfigXmlGenerator generator = new ConfigXmlGenerator(true);
+      log.trace("Config: {}", generator.generate(config));
+    }
+
+    return Hazelcast.newHazelcastInstance(config);
+  }
+
+  private Config getHazelcastConfig(@Nullable final File configFile,
+                                    final ClassLoader classLoader,
+                                    final List<HazelcastConfigParticipant> configurationParticipants)
+  {
+    final Config config;
+    if (null != configFile && configFile.isFile()) {
+      try {
+        log.debug("Loading configuration from file: {}", configFile);
+        config = new FileSystemXmlConfig(configFile);
+      }
+      catch (FileNotFoundException e) {
+        throw Throwables.propagate(e);
+      }
+    }
+    else {
+      // complain; as we probably want a configuration file to set the proper settings
+      log.warn("Loading fresh configuration");
+      config = new XmlConfigBuilder().build();
+    }
+    config.setClassLoader(classLoader);
+
+    for (HazelcastConfigParticipant participant : configurationParticipants) {
+      log.debug("Applying configuration participant: {}", participant);
+      participant.apply(config);
+    }
+
+    return config;
+  }
+}
diff --git a/components/nexus-ldap-common/src/test/java/org/sonatype/security/ldap/LdapTestSupport.java b/components/nexus-ldap-common/src/test/java/org/sonatype/security/ldap/LdapTestSupport.java
index 9a2b69f1..7f9e91ec 100644
--- a/components/nexus-ldap-common/src/test/java/org/sonatype/security/ldap/LdapTestSupport.java
+++ b/components/nexus-ldap-common/src/test/java/org/sonatype/security/ldap/LdapTestSupport.java
@@ -28,7 +28,6 @@ import org.sonatype.security.guice.SecurityModule;
 
 import com.google.common.collect.ObjectArrays;
 import com.google.inject.Module;
-import net.sf.ehcache.CacheManager;
 import org.apache.commons.io.IOUtils;
 import org.codehaus.plexus.ContainerConfiguration;
 import org.codehaus.plexus.PlexusConstants;
@@ -84,8 +83,6 @@ public abstract class LdapTestSupport
   public void tearDown()
       throws Exception
   {
-    lookup(CacheManager.class).shutdown();
-
     if (ldapServer != null && ldapServer.isStarted()) {
       ldapServer.stop();
       ldapServer = null;
diff --git a/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockFactory.java b/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockFactory.java
index a53fb450..3e5d0c06 100644
--- a/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockFactory.java
+++ b/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockFactory.java
@@ -29,7 +29,6 @@ import com.hazelcast.config.XmlConfigBuilder;
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.HazelcastInstance;
 import com.hazelcast.core.ISemaphore;
-import com.hazelcast.core.InstanceDestroyedException;
 import org.eclipse.sisu.inject.Logs;
 
 /**
@@ -170,21 +169,18 @@ final class HazelcastResourceLock
   protected void acquire(final int permits) {
     while (true) {
       try {
-        sem.acquireAttach(permits);
+        sem.acquire(permits);
         return;
       }
       catch (final InterruptedException e) {
         Thread.currentThread().interrupt();
       }
-      catch (final InstanceDestroyedException e) {
-        throw new IllegalStateException(e);
-      }
     }
   }
 
   @Override
   protected void release(final int permits) {
-    sem.releaseDetach(permits);
+    sem.release(permits);
   }
 
   @Override
diff --git a/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockMBean.java b/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockMBean.java
index e4cfd06b..054cf57d 100644
--- a/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockMBean.java
+++ b/components/nexus-locks/src/main/java/org/sonatype/sisu/locks/HazelcastResourceLockMBean.java
@@ -21,8 +21,10 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import java.util.concurrent.Future;
 
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -30,7 +32,6 @@ import javax.management.ObjectName;
 import com.hazelcast.core.HazelcastInstance;
 import com.hazelcast.core.HazelcastInstanceAware;
 import com.hazelcast.core.Member;
-import com.hazelcast.core.MultiTask;
 import org.eclipse.sisu.inject.Logs;
 
 /**
@@ -97,12 +98,12 @@ final class HazelcastResourceLockMBean
    */
   public String[] multiInvoke(final String method, final String... args) {
     final HazelcastMBeansInvoker invoker = new HazelcastMBeansInvoker(jmxQuery, method, args);
-    final MultiTask<List<String>> task = new MultiTask<List<String>>(invoker, filterMembers(method, args));
     final Set<String> results = new HashSet<String>();
     try {
-      instance.getExecutorService().execute(task);
-      for (final List<String> result : task.get()) {
-        results.addAll(result);
+      Map<Member, Future<List<String>>> memberResults =
+          instance.getExecutorService("default").submitToMembers(invoker, filterMembers(method, args));
+      for (final Future<List<String>> result : memberResults.values()) {
+        results.addAll(result.get());
       }
     }
     catch (final Exception e) {
diff --git a/components/nexus-security-realms/src/test/java/org/sonatype/security/AbstractSecurityTestCase.java b/components/nexus-security-realms/src/test/java/org/sonatype/security/AbstractSecurityTestCase.java
index c53b8f0b..4b4a0aaa 100644
--- a/components/nexus-security-realms/src/test/java/org/sonatype/security/AbstractSecurityTestCase.java
+++ b/components/nexus-security-realms/src/test/java/org/sonatype/security/AbstractSecurityTestCase.java
@@ -31,7 +31,6 @@ import org.sonatype.security.model.Configuration;
 import org.sonatype.security.model.io.xpp3.SecurityConfigurationXpp3Reader;
 
 import com.google.inject.Binder;
-import net.sf.ehcache.CacheManager;
 import org.apache.commons.io.FileUtils;
 import org.apache.shiro.realm.Realm;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
@@ -95,7 +94,6 @@ public abstract class AbstractSecurityTestCase
   {
     try {
       lookup(SecuritySystem.class).stop();
-      lookup(CacheManager.class).shutdown();
     }
     finally {
       super.tearDown();
diff --git a/components/nexus-security/pom.xml b/components/nexus-security/pom.xml
index f6968a6d..8331f619 100644
--- a/components/nexus-security/pom.xml
+++ b/components/nexus-security/pom.xml
@@ -70,11 +70,6 @@
 
     <dependency>
       <groupId>org.apache.shiro</groupId>
-      <artifactId>shiro-ehcache</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.shiro</groupId>
       <artifactId>shiro-guice</artifactId>
     </dependency>
 
@@ -85,7 +80,12 @@
 
     <dependency>
       <groupId>org.sonatype.nexus</groupId>
-      <artifactId>nexus-ehcache</artifactId>
+      <artifactId>nexus-cache</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>javax.cache</groupId>
+      <artifactId>cache-api</artifactId>
     </dependency>
 
     <dependency>
diff --git a/components/nexus-security/src/main/java/org/apache/shiro/nexus/NexusWebSessionManager.java b/components/nexus-security/src/main/java/org/apache/shiro/nexus/NexusWebSessionManager.java
new file mode 100644
index 00000000..4e86c30d
--- /dev/null
+++ b/components/nexus-security/src/main/java/org/apache/shiro/nexus/NexusWebSessionManager.java
@@ -0,0 +1,47 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.apache.shiro.nexus;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.apache.shiro.session.mgt.SessionValidationScheduler;
+import org.apache.shiro.web.servlet.Cookie;
+import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
+import org.apache.shiro.web.session.mgt.WebSessionManager;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Custom {@link WebSessionManager}.
+ */
+public class NexusWebSessionManager
+    extends DefaultWebSessionManager
+{
+  private static final Logger log = LoggerFactory.getLogger(NexusWebSessionManager.class);
+
+  private static final String DEFAULT_NEXUS_SESSION_COOKIE_NAME = "NXSESSIONID";
+
+  @Inject
+  public void configureProperties(
+      @Named("${shiro.globalSessionTimeout:-" + DEFAULT_GLOBAL_SESSION_TIMEOUT + "}") final long globalSessionTimeout,
+      @Named("${nexus.sessionCookieName:-" + DEFAULT_NEXUS_SESSION_COOKIE_NAME + "}") final String sessionCookieName)
+  {
+    setGlobalSessionTimeout(globalSessionTimeout);
+    log.info("Global session timeout: {} ms", getGlobalSessionTimeout());
+
+    Cookie cookie = getSessionIdCookie();
+    cookie.setName(sessionCookieName);
+    log.info("Session-cookie prototype: name={}", cookie.getName());
+  }
+}
\ No newline at end of file
diff --git a/components/nexus-security/src/main/java/org/apache/shiro/nexus/ShiroJCacheAdapter.java b/components/nexus-security/src/main/java/org/apache/shiro/nexus/ShiroJCacheAdapter.java
new file mode 100644
index 00000000..e073807c
--- /dev/null
+++ b/components/nexus-security/src/main/java/org/apache/shiro/nexus/ShiroJCacheAdapter.java
@@ -0,0 +1,101 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.apache.shiro.nexus;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.cache.Cache.Entry;
+
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import com.google.common.collect.Iterables;
+import org.apache.shiro.cache.Cache;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/**
+ * Shiro {@link javax.cache.Cache} to {@link Cache} adapter.
+ *
+ * @since 3.0
+ */
+public class ShiroJCacheAdapter<K, V>
+    extends ComponentSupport
+  implements Cache<K, V>
+{
+  private final javax.cache.Cache<K, V> cache;
+
+  private final String name;
+
+  public ShiroJCacheAdapter(final javax.cache.Cache<K, V> cache) {
+    this.cache = checkNotNull(cache);
+    this.name = cache.getName();
+  }
+
+  @Override
+  public V get(final K key) {
+    return cache.get(key);
+  }
+
+  @Override
+  public V put(final K key, final V value) {
+    return cache.getAndPut(key, value);
+  }
+
+  @Override
+  public V remove(final K key) {
+    return cache.getAndRemove(key);
+  }
+
+  // NOTE: This appears unused in Shiro, but used by NX
+  @Override
+  public void clear() {
+    cache.clear();
+  }
+
+  // NOTE: This appears unused in Shiro.
+  @Override
+  public int size() {
+    return Iterables.size(cache);
+  }
+
+  // NOTE: This appears unused in Shiro.
+  @Override
+  public Set<K> keys() {
+    Set<K> keys = new HashSet<>();
+    for (Entry<K, V> entry : cache) {
+      keys.add(entry.getKey());
+    }
+    return Collections.unmodifiableSet(keys);
+  }
+
+  @Override
+  public Collection<V> values() {
+    Collection<V> values = new ArrayList<>();
+    for (Entry<K, V> entry : cache) {
+      values.add(entry.getValue());
+    }
+    return Collections.unmodifiableCollection(values);
+  }
+
+  @Override
+  public String toString() {
+    return getClass().getSimpleName() + "{" +
+        "cache=" + cache +
+        ", name='" + name + '\'' +
+        '}';
+  }
+}
\ No newline at end of file
diff --git a/components/nexus-security/src/main/java/org/apache/shiro/nexus/ShiroJCacheManagerAdapter.java b/components/nexus-security/src/main/java/org/apache/shiro/nexus/ShiroJCacheManagerAdapter.java
new file mode 100644
index 00000000..14a97dc0
--- /dev/null
+++ b/components/nexus-security/src/main/java/org/apache/shiro/nexus/ShiroJCacheManagerAdapter.java
@@ -0,0 +1,74 @@
+/*
+ * Sonatype Nexus (TM) Open Source Version
+ * Copyright (c) 2008-present Sonatype, Inc.
+ * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
+ *
+ * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
+ * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
+ *
+ * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
+ * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
+ * Eclipse Foundation. All other trademarks are the property of their respective owners.
+ */
+package org.apache.shiro.nexus;
+
+import javax.cache.configuration.MutableConfiguration;
+import javax.cache.expiry.EternalExpiryPolicy;
+import javax.inject.Provider;
+
+import org.sonatype.sisu.goodies.common.ComponentSupport;
+
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.shiro.cache.Cache;
+import org.apache.shiro.cache.CacheManager;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Preconditions.checkState;
+
+/**
+ * Shiro {@link javax.cache.CacheManager} to {@link CacheManager} adapter.
+ *
+ * @since 3.0
+ */
+public class ShiroJCacheManagerAdapter
+    extends ComponentSupport
+  implements CacheManager
+{
+  private final Provider<javax.cache.CacheManager> cacheManagerProvider;
+
+  public ShiroJCacheManagerAdapter(final Provider<javax.cache.CacheManager> cacheManagerProvider) {
+    this.cacheManagerProvider = checkNotNull(cacheManagerProvider);
+  }
+
+  @VisibleForTesting
+  public javax.cache.CacheManager manager() {
+    javax.cache.CacheManager result = cacheManagerProvider.get();
+    checkState(result != null, "Cache-manager not bound");
+    return result;
+  }
+
+  @Override
+  public <K, V> Cache<K, V> getCache(final String name) {
+    log.debug("Getting cache: {}", name);
+    return new ShiroJCacheAdapter<>(this.<K,V>maybeCreateCache(name));
+  }
+
+  private <K, V> javax.cache.Cache<K, V> maybeCreateCache(final String name) {
+    javax.cache.Cache<K, V> cache = manager().getCache(name);
+    if (cache == null) {
+      log.debug("Creating cache: {}", name);
+      MutableConfiguration<K, V> cacheConfig = new MutableConfiguration<K, V>()
+          .setStoreByValue(false)
+          .setExpiryPolicyFactory(EternalExpiryPolicy.factoryOf())
+          .setManagementEnabled(true)
+          .setStatisticsEnabled(true);
+
+      cache = manager().createCache(name, cacheConfig);
+      log.debug("Created cache: {}", cache);
+    }
+    else {
+      log.debug("Re-using existing cache: {}", cache);
+    }
+    return cache;
+  }
+}
\ No newline at end of file
diff --git a/components/nexus-security/src/main/java/org/apache/shiro/nexus5727/FixedDefaultSessionManager.java b/components/nexus-security/src/main/java/org/apache/shiro/nexus5727/FixedDefaultSessionManager.java
deleted file mode 100644
index 7711dd86..00000000
--- a/components/nexus-security/src/main/java/org/apache/shiro/nexus5727/FixedDefaultSessionManager.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.apache.shiro.nexus5727;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-
-import org.apache.shiro.session.mgt.DefaultSessionManager;
-import org.apache.shiro.session.mgt.SessionValidationScheduler;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Fixed {@link DefaultSessionManager} for issue SHIRO-443. This subclass is put into package of Shiro to have
- * shiro-guice's TypeListener applied to it, and result in same behavior as for other Shiro classes.
- *
- * @author cstamas
- * @see <a href="https://issues.apache.org/jira/browse/SHIRO-443">SHIRO-443 SessionValidationScheduler created multiple
- *      times, enabling it is not thread safe</a>
- * @see <a href="https://issues.sonatype.org/browse/NEXUS-5727>NEXUS-5727 Shiro's session validating thread created
- *      multiple times</a>
- */
-public class FixedDefaultSessionManager
-    extends DefaultSessionManager
-{
-  private static final Logger log = LoggerFactory.getLogger(FixedDefaultSessionManager.class);
-
-  @Inject
-  public void configureProperties(
-      final @Named("${shiro.globalSessionTimeout:-" + DEFAULT_GLOBAL_SESSION_TIMEOUT + "}") long globalSessionTimeout)
-  {
-    setGlobalSessionTimeout(globalSessionTimeout);
-  }
-
-  @Override
-  protected synchronized void enableSessionValidation() {
-    log.info("Global session timeout: {} ms", getGlobalSessionTimeout());
-    final SessionValidationScheduler scheduler = getSessionValidationScheduler();
-    if (scheduler == null) {
-      super.enableSessionValidation();
-    }
-  }
-}
diff --git a/components/nexus-security/src/main/java/org/apache/shiro/nexus5727/FixedDefaultWebSessionManager.java b/components/nexus-security/src/main/java/org/apache/shiro/nexus5727/FixedDefaultWebSessionManager.java
deleted file mode 100644
index 87bc2355..00000000
--- a/components/nexus-security/src/main/java/org/apache/shiro/nexus5727/FixedDefaultWebSessionManager.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Sonatype Nexus (TM) Open Source Version
- * Copyright (c) 2008-present Sonatype, Inc.
- * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
- *
- * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
- * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
- *
- * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
- * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
- * Eclipse Foundation. All other trademarks are the property of their respective owners.
- */
-package org.apache.shiro.nexus5727;
-
-import java.util.Collection;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-
-import org.apache.shiro.session.SessionListener;
-import org.apache.shiro.session.mgt.SessionValidationScheduler;
-import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Fixed {@link DefaultWebSessionManager} for issue SHIRO-443. This subclass is put into package of Shiro to have
- * shiro-guice's TypeListener applied to it, and result in same behavior as for other Shiro classes.
- *
- * @author cstamas
- * @see <a href="https://issues.apache.org/jira/browse/SHIRO-443">SHIRO-443 SessionValidationScheduler created multiple
- *      times, enabling it is not thread safe</a>
- * @see <a href="https://issues.sonatype.org/browse/NEXUS-5727>NEXUS-5727 Shiro's session validating thread created
- *      multiple times</a>
- */
-public class FixedDefaultWebSessionManager
-    extends DefaultWebSessionManager
-{
-  /**
-   * Default HTTP session cookie name that Nexus uses - NXSESSIONID
-   */
-  public static final String DEFAULT_NEXUS_SESSION_COOKIE_NAME = "NXSESSIONID";
-
-  private static final Logger log = LoggerFactory.getLogger(FixedDefaultWebSessionManager.class);
-
-  @Inject
-  public void configureProperties(
-      final @Named("${shiro.globalSessionTimeout:-" + DEFAULT_GLOBAL_SESSION_TIMEOUT + "}") long globalSessionTimeout,
-      final @Named("${nexus.sessionCookieName:-" + DEFAULT_NEXUS_SESSION_COOKIE_NAME + "}") String sessionCookieName)
-  {
-    setGlobalSessionTimeout(globalSessionTimeout);
-    getSessionIdCookie().setName(sessionCookieName);
-  }
-
-  @Inject
-  public void configureSessionListeners(final Collection<SessionListener> listeners) {
-    setSessionListeners(listeners);
-  }
-
-  @Override
-  protected synchronized void enableSessionValidation() {
-    log.info("Global session timeout: {} ms", getGlobalSessionTimeout());
-    final SessionValidationScheduler scheduler = getSessionValidationScheduler();
-    if (scheduler == null) {
-      super.enableSessionValidation();
-    }
-  }
-}
diff --git a/components/nexus-security/src/main/java/org/sonatype/security/DefaultSecuritySystem.java b/components/nexus-security/src/main/java/org/sonatype/security/DefaultSecuritySystem.java
index 1be798f9..fab399c0 100644
--- a/components/nexus-security/src/main/java/org/sonatype/security/DefaultSecuritySystem.java
+++ b/components/nexus-security/src/main/java/org/sonatype/security/DefaultSecuritySystem.java
@@ -21,9 +21,11 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import javax.cache.CacheManager;
 import javax.enterprise.inject.Typed;
 import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Provider;
 import javax.inject.Singleton;
 
 import org.sonatype.configuration.validation.InvalidConfigurationException;
@@ -53,14 +55,13 @@ import org.sonatype.security.usermanagement.UserStatus;
 import org.sonatype.sisu.goodies.eventbus.EventBus;
 
 import com.google.common.eventbus.Subscribe;
-import net.sf.ehcache.CacheManager;
 import org.apache.shiro.SecurityUtils;
 import org.apache.shiro.authc.AuthenticationInfo;
 import org.apache.shiro.authc.AuthenticationToken;
 import org.apache.shiro.authc.UsernamePasswordToken;
 import org.apache.shiro.cache.Cache;
-import org.apache.shiro.cache.ehcache.EhCacheManager;
 import org.apache.shiro.mgt.RealmSecurityManager;
+import org.apache.shiro.nexus.ShiroJCacheManagerAdapter;
 import org.apache.shiro.realm.AuthenticatingRealm;
 import org.apache.shiro.realm.AuthorizingRealm;
 import org.apache.shiro.realm.Realm;
@@ -85,7 +86,7 @@ public class DefaultSecuritySystem
 
   private RealmSecurityManager securityManager;
 
-  private CacheManager cacheManager;
+  private Provider<CacheManager> cacheManager;
 
   private UserManagerFacade userManagerFacade;
 
@@ -113,7 +114,7 @@ public class DefaultSecuritySystem
                                Map<String, Realm> realmMap,
                                SecurityConfigurationManager securityConfiguration,
                                RealmSecurityManager securityManager,
-                               CacheManager cacheManager,
+                               Provider<CacheManager> cacheManager,
                                UserManagerFacade userManagerFacade)
   {
     this.securityEmailers = securityEmailers;
@@ -764,9 +765,8 @@ public class DefaultSecuritySystem
 
     // setup the CacheManager ( this could be injected if we where less coupled with ehcache)
     // The plexus wrapper can interpolate the config
-    EhCacheManager ehCacheManager = new EhCacheManager();
-    ehCacheManager.setCacheManager(cacheManager);
-    this.getSecurityManager().setCacheManager(ehCacheManager);
+    ShiroJCacheManagerAdapter shiroCacheManager = new ShiroJCacheManagerAdapter(cacheManager);
+    this.getSecurityManager().setCacheManager(shiroCacheManager);
 
     if (org.apache.shiro.util.Initializable.class.isInstance(this.getSecurityManager())) {
       ((org.apache.shiro.util.Initializable) this.getSecurityManager()).init();
diff --git a/components/nexus-security/src/main/java/org/sonatype/security/guice/SecurityModule.java b/components/nexus-security/src/main/java/org/sonatype/security/guice/SecurityModule.java
index aaf89890..c06afb28 100644
--- a/components/nexus-security/src/main/java/org/sonatype/security/guice/SecurityModule.java
+++ b/components/nexus-security/src/main/java/org/sonatype/security/guice/SecurityModule.java
@@ -30,8 +30,8 @@ import org.apache.shiro.guice.ShiroModule;
 import org.apache.shiro.mgt.DefaultSecurityManager;
 import org.apache.shiro.mgt.RealmSecurityManager;
 import org.apache.shiro.mgt.SecurityManager;
-import org.apache.shiro.nexus5727.FixedDefaultSessionManager;
 import org.apache.shiro.realm.Realm;
+import org.apache.shiro.session.mgt.DefaultSessionManager;
 import org.apache.shiro.session.mgt.SessionManager;
 import org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;
 import org.apache.shiro.session.mgt.eis.SessionDAO;
@@ -69,10 +69,9 @@ public class SecurityModule
 
   @Override
   protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind) {
-    // workaround for NEXUS-5727, see FixedDefaultSessionManager javadoc for clues
-    bind.to(FixedDefaultSessionManager.class).asEagerSingleton();
-    // this is a PrivateModule, so explicitly binding the FixedDefaultSessionManager class
-    bind(FixedDefaultSessionManager.class);
+    bind.to(DefaultSessionManager.class).asEagerSingleton();
+    // this is a PrivateModule, so explicit binding needed
+    bind(DefaultSessionManager.class);
   }
 
   /**
diff --git a/components/nexus-security/src/main/java/org/sonatype/security/web/guice/SecurityWebModule.java b/components/nexus-security/src/main/java/org/sonatype/security/web/guice/SecurityWebModule.java
index 6bde132a..74047257 100644
--- a/components/nexus-security/src/main/java/org/sonatype/security/web/guice/SecurityWebModule.java
+++ b/components/nexus-security/src/main/java/org/sonatype/security/web/guice/SecurityWebModule.java
@@ -39,7 +39,7 @@ import org.apache.shiro.config.ConfigurationException;
 import org.apache.shiro.guice.web.ShiroWebModule;
 import org.apache.shiro.mgt.RealmSecurityManager;
 import org.apache.shiro.nexus.NexusWebSecurityManager;
-import org.apache.shiro.nexus5727.FixedDefaultWebSessionManager;
+import org.apache.shiro.nexus.NexusWebSessionManager;
 import org.apache.shiro.realm.Realm;
 import org.apache.shiro.session.mgt.SessionManager;
 import org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;
@@ -49,6 +49,7 @@ import org.apache.shiro.web.filter.mgt.FilterChainManager;
 import org.apache.shiro.web.filter.mgt.FilterChainResolver;
 import org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver;
 import org.apache.shiro.web.mgt.WebSecurityManager;
+import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
 import org.eclipse.sisu.BeanEntry;
 import org.eclipse.sisu.Mediator;
 import org.eclipse.sisu.inject.BeanLocator;
@@ -108,11 +109,9 @@ public class SecurityWebModule
 
   @Override
   protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind) {
-    // use native web session management instead of delegating to servlet container
-    // workaround for NEXUS-5727, see FixedDefaultWebSessionManager javadoc for clues
-    bind.to(FixedDefaultWebSessionManager.class).asEagerSingleton();
-    // this is a PrivateModule, so explicitly binding the FixedDefaultSessionManager class
-    bind(FixedDefaultWebSessionManager.class);
+    bind.to(NexusWebSessionManager.class).asEagerSingleton();
+    // this is a PrivateModule, so explicit binding needed
+    bind(NexusWebSessionManager.class);
   }
 
   /**
diff --git a/components/nexus-security/src/test/java/org/sonatype/security/AbstractSecurityTest.java b/components/nexus-security/src/test/java/org/sonatype/security/AbstractSecurityTest.java
index de7f3de3..627740f6 100644
--- a/components/nexus-security/src/test/java/org/sonatype/security/AbstractSecurityTest.java
+++ b/components/nexus-security/src/test/java/org/sonatype/security/AbstractSecurityTest.java
@@ -18,7 +18,6 @@ import java.util.Properties;
 import org.sonatype.security.guice.SecurityModule;
 
 import com.google.inject.Binder;
-import net.sf.ehcache.CacheManager;
 import org.apache.commons.io.FileUtils;
 import org.apache.shiro.util.ThreadContext;
 import org.eclipse.sisu.launch.InjectedTestCase;
@@ -61,7 +60,6 @@ public abstract class AbstractSecurityTest
   {
     try {
       getSecuritySystem().stop();
-      lookup(CacheManager.class).shutdown();
     }
     finally {
       ThreadContext.remove();
diff --git a/components/nexus-security/src/test/java/org/sonatype/security/guice/SecurityModuleTest.java b/components/nexus-security/src/test/java/org/sonatype/security/guice/SecurityModuleTest.java
index 49e7e15b..dd08c431 100644
--- a/components/nexus-security/src/test/java/org/sonatype/security/guice/SecurityModuleTest.java
+++ b/components/nexus-security/src/test/java/org/sonatype/security/guice/SecurityModuleTest.java
@@ -15,27 +15,26 @@ package org.sonatype.security.guice;
 import java.util.HashMap;
 import java.util.Map;
 
+import javax.cache.CacheManager;
+
 import org.sonatype.security.SecuritySystem;
-import org.sonatype.sisu.ehcache.CacheManagerComponent;
 import org.sonatype.sisu.litmus.testsupport.TestSupport;
 
 import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.Module;
-import net.sf.ehcache.CacheManager;
-import org.apache.shiro.cache.ehcache.EhCacheManager;
 import org.apache.shiro.mgt.DefaultSecurityManager;
 import org.apache.shiro.mgt.RealmSecurityManager;
 import org.apache.shiro.mgt.SecurityManager;
-import org.apache.shiro.nexus5727.FixedDefaultSessionManager;
+import org.apache.shiro.nexus.ShiroJCacheManagerAdapter;
+import org.apache.shiro.session.mgt.DefaultSessionManager;
 import org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;
 import org.eclipse.sisu.space.BeanScanning;
 import org.eclipse.sisu.space.SpaceModule;
 import org.eclipse.sisu.space.URLClassSpace;
 import org.eclipse.sisu.wire.ParameterKeys;
 import org.eclipse.sisu.wire.WireModule;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -73,21 +72,14 @@ public class SecurityModuleTest
     assertThat(securityManager, instanceOf(DefaultSecurityManager.class));
     DefaultSecurityManager defaultSecurityManager = (DefaultSecurityManager) securityManager;
 
-    assertThat(defaultSecurityManager.getSessionManager(), instanceOf(FixedDefaultSessionManager.class));
-    FixedDefaultSessionManager sessionManager =
-        (FixedDefaultSessionManager) defaultSecurityManager.getSessionManager();
+    assertThat(defaultSecurityManager.getSessionManager(), instanceOf(DefaultSessionManager.class));
+    DefaultSessionManager sessionManager =
+        (DefaultSessionManager) defaultSecurityManager.getSessionManager();
     assertThat(sessionManager.getSessionDAO(), instanceOf(EnterpriseCacheSessionDAO.class));
     assertThat(
-        ((EhCacheManager) ((EnterpriseCacheSessionDAO) sessionManager.getSessionDAO()).getCacheManager())
-            .getCacheManager(),
-        sameInstance(injector.getInstance(CacheManagerComponent.class).getCacheManager()));
-  }
-
-  @After
-  public void stopCache() {
-    if (injector != null) {
-      injector.getInstance(CacheManager.class).shutdown();
-    }
+        ((ShiroJCacheManagerAdapter) ((EnterpriseCacheSessionDAO) sessionManager.getSessionDAO()).getCacheManager())
+            .manager(),
+        sameInstance(injector.getInstance(CacheManager.class)));
   }
 
   private Module getWireModule() {
diff --git a/components/nexus-security/src/test/java/org/sonatype/security/web/guice/SecurityWebModuleTest.java b/components/nexus-security/src/test/java/org/sonatype/security/web/guice/SecurityWebModuleTest.java
index 3f4d7712..6773489b 100644
--- a/components/nexus-security/src/test/java/org/sonatype/security/web/guice/SecurityWebModuleTest.java
+++ b/components/nexus-security/src/test/java/org/sonatype/security/web/guice/SecurityWebModuleTest.java
@@ -26,7 +26,6 @@ import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.Module;
-import net.sf.ehcache.CacheManager;
 import org.apache.shiro.mgt.DefaultSecurityManager;
 import org.apache.shiro.mgt.RealmSecurityManager;
 import org.apache.shiro.mgt.SecurityManager;
@@ -46,7 +45,6 @@ import org.eclipse.sisu.space.SpaceModule;
 import org.eclipse.sisu.space.URLClassSpace;
 import org.eclipse.sisu.wire.ParameterKeys;
 import org.eclipse.sisu.wire.WireModule;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -110,13 +108,6 @@ public class SecurityWebModuleTest
         equalTo("target/foo/security.xml"));
   }
 
-  @After
-  public void stopCache() {
-    if (injector != null) {
-      injector.getInstance(CacheManager.class).shutdown();
-    }
-  }
-
   private Module getWireModule() {
     return new WireModule(getShiroModule(), getSpaceModule(), getPropertiesModule());
   }
diff --git a/components/nexus-webapp/src/main/resources/ehcache.xml b/components/nexus-webapp/src/main/resources/ehcache.xml
index 3e240f80..2ca42a91 100644
--- a/components/nexus-webapp/src/main/resources/ehcache.xml
+++ b/components/nexus-webapp/src/main/resources/ehcache.xml
@@ -13,366 +13,32 @@
     Eclipse Foundation. All other trademarks are the property of their respective owners.
 
 -->
-<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
-    updateCheck="false" monitoring="off"
-    dynamicConfig="true">
-
-    <!-- Sets the path to the directory where cache .data files are created.
-
-         If the path is a Java System Property it is replaced by
-         its value in the running VM. The following properties are translated:
-
-            user.home - User's home directory
-            user.dir - User's current working directory
-            java.io.tmpdir - Default temp file path
-    -->
-    <diskStore path="java.io.tmpdir/nexus-ehcache"/>
-    
-    <!-- all created caches shares these defaults
-            memoryStoreEvictionPolicy= ("LRU"|"LFU"|"FIFO")
-              LRU - least recently used
-              LFU - least frequently used
-              FIFO - first in first out
-    -->
-    <defaultCache
-            maxElementsInMemory="1000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-    <!-- Nexus NFC -->
-    <cache name="nx-repository-path-cache" 
-            maxElementsInMemory="100000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="false"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LFU"
-            />
-
-    <!-- Shiro cache used by EnterpriseCacheSessionDAO must NOT loose sessions, EHCache must not remove entries based on timeout, eviction etc. -->
-    <!-- Only way how session should be removed is via Shiro's own org.apache.shiro.session.mgt.AbstractValidatingSessionManager (called from dedicated thread started by Shiro)  -->
-    <!-- See http://shiro.apache.org/session-management.html#SessionManagement-EHCacheSessionDAO -->
-    <!-- Configuration bits copied from https://github.com/apache/shiro/blob/trunk/support/ehcache/src/main/resources/org/apache/shiro/cache/ehcache/ehcache.xml#L75 -->
-    <cache name="shiro-activeSessionCache"
-           maxElementsInMemory="10000"
-           overflowToDisk="true"
-           eternal="true"
-           timeToLiveSeconds="0"
-           timeToIdleSeconds="0"
-           diskPersistent="true"
-           diskExpiryThreadIntervalSeconds="600"/>
-
-    <!--
-    DiskStore configuration
-
-    Sets the path to the directory where cache files are created.
-
-    If the path is a Java System Property it is replaced by its value in the
-    running VM.
-
-    The following properties are translated:
-    * user.home - User's home directory
-    * user.dir - User's current working directory
-    * java.io.tmpdir - Default temp file path
-
-    Subdirectories can be specified below the property e.g. java.io.tmpdir/one
-    <diskStore path="basedir/nexus-work/proxy/ehcache"/>
-    -->
-
-    <!--
-    Specifies a CacheManagerEventListenerFactory, be used to create a CacheManagerPeerProvider,
-    which is notified when Caches are added or removed from the CacheManager.
-
-    The attributes of CacheManagerEventListenerFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Sets the fully qualified class name to be registered as the CacheManager event listener.
-
-    The events include:
-    * adding a Cache
-    * removing a Cache
-
-    Callbacks to listener methods are synchronous and unsynchronized. It is the responsibility
-    of the implementer to safely handle the potential performance and thread safety issues
-    depending on what their listener is doing.
-
-    If no class is specified, no listener is created. There is no default.
-
-    <cacheManagerEventListenerFactory class="" properties=""/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerProviderFactory which will be used to create a
-    CacheManagerPeerProvider, which discovers other CacheManagers in the cluster.
-
-    The attributes of cacheManagerPeerProviderFactory are:
-    * class - a fully qualified factory class name
-    * properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system with two means of discovery of
-    CacheManager peers participating in the cluster:
-    * automatic, using a multicast group. This one automatically discovers peers and detects
-      changes such as peers entering and leaving the group
-    * manual, using manual rmiURL configuration. A hardcoded list of peers is provided at
-      configuration time.
-
-    Configuring Automatic Discovery:
-    Automatic discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory
-                        class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                        properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1,
-                                    multicastGroupPort=4446, timeToLive=32"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "automatic"
-    * multicastGroupAddress (mandatory) - specify a valid multicast group address
-    * multicastGroupPort (mandatory) - specify a dedicated port for the multicast heartbeat
-      traffic
-    * timeToLive - specify a value between 0 and 255 which determines how far the packets will propagate.
-      By convention, the restrictions are:
-      0   - the same host
-      1   - the same subnet
-      32  - the same site
-      64  - the same region
-      128 - the same continent
-      255 - unrestricted
-
-
-    Configuring Manual Discovery:
-    Manual discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-                          "net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-                          properties="peerDiscovery=manual,
-                          rmiUrls=//server1:40000/sampleCache1|//server2:40000/sampleCache1
-                          | //server1:40000/sampleCache2|//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * rmiUrls (mandatory) - specify a pipe separated list of rmiUrls, in the form
-                            //hostname:port
-
-    The hostname is the hostname of the remote CacheManager peer. The port is the listening
-    port of the RMICacheManagerPeerListener of the remote CacheManager peer.
-
-    An alternate CacheManagerPeerProviderFactory can be used for JNDI discovery of other
-    CacheManagers in the cluster. Only manual discovery is supported.
-
-    For cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-
-    Correspondingly for cacheManagerPeerListenerFactory specify class
-    net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactoryory.
-
-    Configuring JNDI Manual Discovery:
-    Manual JNDI discovery is configured as per the following example:
-    <cacheManagerPeerProviderFactory class=
-        "net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory"
-        properties="peerDiscovery=manual, stashContexts=true, stashRemoteCachePeers=true,
-              jndiUrls=t3//server1:40000/sampleCache1|t3//server2:40000/sampleCache1
-              |t3//server1:40000/sampleCache2|t3//server2:40000/sampleCache2"/>
-
-    Valid properties are:
-    * peerDiscovery (mandatory) - specify "manual"
-    * stashContexts (optional) - specify "true" or "false".  Defaults to true.
-      java.naming.Context objects are stashed for performance.
-    * stashRemoteCachePeers (optional) - specify "true" or "false".  Defaults to true.
-      CachePeer objects are stashed for performance.
-    * jndiUrls (mandatory) - specify a pipe separated list of jndiUrls,
-      in the form protocol//hostname:port
-
-    <cacheManagerPeerProviderFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
-            properties="peerDiscovery=automatic,
-                        multicastGroupAddress=230.0.0.1,
-                        multicastGroupPort=4446, timeToLive=1"/>
-    -->
-
-    <!--
-    (Enable for distributed operation)
-
-    Specifies a CacheManagerPeerListenerFactory which will be used to create a
-    CacheManagerPeerListener, which
-    listens for messages from cache replicators participating in the cluster.
-
-    The attributes of cacheManagerPeerListenerFactory are:
-    class - a fully qualified factory class name
-    properties - comma separated properties having meaning only to the factory.
-
-    Ehcache comes with a built-in RMI-based distribution system. The listener component is
-    RMICacheManagerPeerListener which is configured using
-    RMICacheManagerPeerListenerFactory. It is configured as per the following example:
-
-    <cacheManagerPeerListenerFactory
-        class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
-        properties="hostName=fully_qualified_hostname_or_ip,
-                    port=40001,
-                    socketTimeoutMillis=120000"/>
-
-    All properties are optional. They are:
-    * hostName - the hostName of the host the listener is running on. Specify
-      where the host is multihomed and you want to control the interface over which cluster
-      messages are received. Defaults to the host name of the default interface if not
-      specified.
-    * port - the port the listener listens on. This defaults to a free port if not specified.
-    * socketTimeoutMillis - the number of ms client sockets will stay open when sending
-      messages to the listener. This should be long enough for the slowest message.
-      If not specified it defaults 120000ms.
-
-
-    An alternate CacheManagerPeerListenerFactory can be also be used for JNDI binding of
-    listeners for messages from cache replicators participating in the cluster. For
-    cacheManagerPeerListenerFactory specify
-    class net.sf.ehcache.distribution.JNDIRMICacheManagerPeerListenerFactory.
-    Correspondingly for cacheManagerPeerProviderFactory specify class
-    net.sf.ehcache.distribution.JNDIManualRMICacheManagerPeerProviderFactoryerFactory.
-    Properties for JNDIRMICacheManagerPeerListenerFactory are the same as
-    RMICacheManagerPeerListenerFactory.
-
-
-    <cacheManagerPeerListenerFactory
-            class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"/>
-    -->
-
-
-    <!-- Cache configuration.
-
-    The following attributes are required.
-
-    name:
-    Sets the name of the cache. This is used to identify the cache. It must be unique.
-
-    maxElementsInMemory:
-    Sets the maximum number of objects that will be created in memory
-
-    maxElementsOnDisk:
-    Sets the maximum number of objects that will be maintained in the DiskStore
-    The default value is zero, meaning unlimited.
-
-    eternal:
-    Sets whether elements are eternal. If eternal,  timeouts are ignored and the
-    element is never expired.
-
-    overflowToDisk:
-    Sets whether elements can overflow to disk when the in-memory cache
-    has reached the maxInMemory limit.
-
-    The following attributes are optional.
-
-    timeToIdleSeconds:
-    Sets the time to idle for an element before it expires.
-    i.e. The maximum amount of time between accesses before an element expires
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that an Element can idle for infinity.
-    The default value is 0.
-
-    timeToLiveSeconds:
-    Sets the time to live for an element before it expires.
-    i.e. The maximum time between creation time and when an element expires.
-    Is only used if the element is not eternal.
-    Optional attribute. A value of 0 means that and Element can live for infinity.
-    The default value is 0.
-
-    diskPersistent:
-    Whether the disk store persists between restarts of the Virtual Machine.
-    The default value is false.
-
-    diskExpiryThreadIntervalSeconds:
-    The number of seconds between runs of the disk expiry thread. The default value
-    is 120 seconds.
-
-    memoryStoreEvictionPolicy:
-    Policy would be enforced upon reaching the maxElementsInMemory limit. Default
-    policy is Least Recently Used (specified as LRU). Other policies available -
-    First In First Out (specified as FIFO) and Less Frequently Used
-    (specified as LFU)
-
-    Cache elements can also contain sub elements which take the same format of a factory class
-    and properties. Defined sub-elements are:
-
-    * cacheEventListenerFactory - Enables registration of listeners for cache events, such as
-      put, remove, update, and expire.
-
-    * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
-      cache on initialisation to pre-populate itself.
-
-    Each cache that will be distributed needs to set a cache event listener which replicates
-    messages to the other CacheManager peers. For the built-in RMI implementation this is done
-    by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
-    distributed cache's configuration as per the following example:
-
-    <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
-         properties="replicateAsynchronously=true,
-         replicatePuts=true,
-         replicateUpdates=true,
-         replicateUpdatesViaCopy=true,
-         replicateRemovals=true "/>
-
-    The RMICacheReplicatorFactory recognises the following properties:
-
-    * replicatePuts=true|false - whether new elements placed in a cache are
-      replicated to others. Defaults to true.
-
-    * replicateUpdates=true|false - whether new elements which override an
-      element already existing with the same key are replicated. Defaults to true.
-
-    * replicateRemovals=true - whether element removals are replicated. Defaults to true.
-
-    * replicateAsynchronously=true | false - whether replications are
-      asynchronous (true) or synchronous (false). Defaults to true.
-
-    * replicateUpdatesViaCopy=true | false - whether the new elements are
-      copied to other caches (true), or whether a remove message is sent. Defaults to true.
-
-
-    * asynchronousReplicationIntervalMillis=<number of milliseconds> - The asynchronous
-      replicator runs at a set interval of milliseconds. The default is 1000. The minimum
-      is 10. This property is only applicable if replicateAsynchronously=true
-
-
-    The RMIBootstrapCacheLoader bootstraps caches in clusters where RMICacheReplicators are
-    used. It is configured as per the following example:
-
-    <bootstrapCacheLoaderFactory
-        class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"
-        properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"/>
-
-    The RMIBootstrapCacheLoaderFactory recognises the following optional properties:
-
-    * bootstrapAsynchronously=true|false - whether the bootstrap happens in the background
-      after the cache has started. If false, bootstrapping must complete before the cache is
-      made available. The default value is true.
-
-    * maximumChunkSizeBytes=<integer> - Caches can potentially be very large, larger than the
-      memory limits of the VM. This property allows the bootstraper to fetched elements in
-      chunks. The default chunk size is 5000000 (5MB).
-
-    -->
-
-    <!--
-    Mandatory Default Cache configuration. These settings will be applied to caches
-    created programmatically using CacheManager.add(String cacheName)
-    <defaultCache
-            maxElementsInMemory="10000"
-            eternal="false"
-            timeToIdleSeconds="120"
-            timeToLiveSeconds="120"
-            overflowToDisk="true"
-            maxElementsOnDisk="10000000"
-            diskPersistent="false"
-            diskExpiryThreadIntervalSeconds="120"
-            memoryStoreEvictionPolicy="LRU"
-            />
-    -->
-</ehcache>
+<config
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns="http://www.ehcache.org/v3"
+    xmlns:jsr107="http://www.ehcache.org/v3/jsr107"
+    xsi:schemaLocation="
+      http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.1.xsd
+      http://www.ehcache.org/v3/jsr107 http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd">
+
+  <!--
+  Enable JSR107 JCache defaultsL this means you can size JCaches via EhCache config, something JCache API does not allow.
+  -->
+  <service>
+    <jsr107:defaults enable-management="true" enable-statistics="true"/>
+  </service>
+
+  <!--
+  Shiro session cache
+  Note: this cache MUST NOT EXPIRE entries, it will do Shiro, otherwise spurious "unknown session" errors will happen
+  TBD: cache should grow, overflow to disk (was like it in older setup)
+  -->
+  <cache alias="shiro-activeSessionCache">
+    <expiry>
+      <none/>
+    </expiry>
+    <resources>
+      <heap unit="entries">10000</heap>
+    </resources>
+  </cache>
+</config>
diff --git a/components/pom.xml b/components/pom.xml
index aaac2b55..7f857ad7 100644
--- a/components/pom.xml
+++ b/components/pom.xml
@@ -28,13 +28,14 @@
   <packaging>pom</packaging>
 
   <modules>
+    <module>nexus-hazelcast</module>
+    <module>nexus-cache</module>
     <module>base-configuration</module>
     <module>nexus-bootstrap</module>
     <module>nexus-client-core</module>
     <module>nexus-configuration-model</module>
     <module>nexus-core</module>
     <module>nexus-csrfguard</module>
-    <module>nexus-ehcache</module>
     <module>nexus-launcher</module>
     <module>nexus-ldap-common</module>
     <module>nexus-locks</module>
diff --git a/plugins/restlet1x/nexus-restlet-bridge/src/main/java/org/sonatype/plexus/rest/PlexusContainerConfigurationUtils.java b/plugins/restlet1x/nexus-restlet-bridge/src/main/java/org/sonatype/plexus/rest/PlexusContainerConfigurationUtils.java
index 80b4ae12..f4938e99 100644
--- a/plugins/restlet1x/nexus-restlet-bridge/src/main/java/org/sonatype/plexus/rest/PlexusContainerConfigurationUtils.java
+++ b/plugins/restlet1x/nexus-restlet-bridge/src/main/java/org/sonatype/plexus/rest/PlexusContainerConfigurationUtils.java
@@ -42,7 +42,7 @@ public class PlexusContainerConfigurationUtils
   public ContainerConfiguration buildContainerConfiguration(ServletContext servletContext) {
     ContainerConfiguration cc = new DefaultContainerConfiguration()
         .setName(servletContext.getServletContextName()).setContainerConfigurationURL(
-            buildConfigurationURL(servletContext)).setContext(buildContext(servletContext));
+            buildConfigurationURL(servletContext)).setContext(buildContext(servletContext)).setJSR250Lifecycle(true);
 
     return cc;
   }
diff --git a/plugins/restlet1x/nexus-restlet1x-plugin/src/test/java/org/sonatype/security/rest/users/AbstractSecurityRestTest.java b/plugins/restlet1x/nexus-restlet1x-plugin/src/test/java/org/sonatype/security/rest/users/AbstractSecurityRestTest.java
index 2e1045c0..1c3ac045 100644
--- a/plugins/restlet1x/nexus-restlet1x-plugin/src/test/java/org/sonatype/security/rest/users/AbstractSecurityRestTest.java
+++ b/plugins/restlet1x/nexus-restlet1x-plugin/src/test/java/org/sonatype/security/rest/users/AbstractSecurityRestTest.java
@@ -22,7 +22,6 @@ import org.sonatype.sisu.goodies.eventbus.EventBus;
 
 import com.google.common.collect.ObjectArrays;
 import com.google.inject.Module;
-import net.sf.ehcache.CacheManager;
 import org.apache.commons.io.FileUtils;
 import org.apache.shiro.util.ThreadContext;
 import org.codehaus.plexus.ContainerConfiguration;
@@ -82,7 +81,6 @@ public abstract class AbstractSecurityRestTest
     eventBus.post(new NexusStoppedEvent(null));
     try {
       lookup(SecuritySystem.class).stop();
-      lookup(CacheManager.class).shutdown();
     }
     finally {
       super.tearDown();
diff --git a/plugins/security/nexus-ldap-realm-plugin/src/test/java/org/sonatype/nexus/NexusLdapTestSupport.java b/plugins/security/nexus-ldap-realm-plugin/src/test/java/org/sonatype/nexus/NexusLdapTestSupport.java
index 7f8d8693..76e942b0 100644
--- a/plugins/security/nexus-ldap-realm-plugin/src/test/java/org/sonatype/nexus/NexusLdapTestSupport.java
+++ b/plugins/security/nexus-ldap-realm-plugin/src/test/java/org/sonatype/nexus/NexusLdapTestSupport.java
@@ -28,7 +28,6 @@ import org.sonatype.plexus.rest.resource.error.ErrorMessage;
 import org.sonatype.plexus.rest.resource.error.ErrorResponse;
 import org.sonatype.security.configuration.source.SecurityConfigurationSource;
 
-import net.sf.ehcache.CacheManager;
 import org.apache.commons.io.IOUtils;
 import org.codehaus.plexus.util.InterpolationFilterReader;
 import org.junit.Assert;
@@ -101,8 +100,6 @@ public abstract class NexusLdapTestSupport
   protected void tearDown()
       throws Exception
   {
-    lookup(CacheManager.class).shutdown();
-
     if (ldapServer != null) {
       ldapServer.stop();
       ldapServer = null;
diff --git a/pom.xml b/pom.xml
index 02f14c94..f196bede 100644
--- a/pom.xml
+++ b/pom.xml
@@ -219,12 +219,6 @@
 
       <dependency>
         <groupId>org.sonatype.nexus</groupId>
-        <artifactId>nexus-ehcache</artifactId>
-        <version>2.14.2-SNAPSHOT</version>
-      </dependency>
-
-      <dependency>
-        <groupId>org.sonatype.nexus</groupId>
         <artifactId>nexus-launcher</artifactId>
         <version>2.14.2-SNAPSHOT</version>
       </dependency>
@@ -296,6 +290,18 @@
         <version>2.14.2-SNAPSHOT</version>
       </dependency>
 
+      <dependency>
+        <groupId>org.sonatype.nexus</groupId>
+        <artifactId>nexus-cache</artifactId>
+        <version>2.14.2-SNAPSHOT</version>
+      </dependency>
+
+      <dependency>
+        <groupId>org.sonatype.nexus</groupId>
+        <artifactId>nexus-hazelcast</artifactId>
+        <version>2.14.2-SNAPSHOT</version>
+      </dependency>
+
       <!-- testsupport -->
 
       <dependency>
diff --git a/testsupport/nexus-it-helper-plugin/src/test/java/org/sonatype/security/realms/AbstractRealmWithSecuritySystemTest.java b/testsupport/nexus-it-helper-plugin/src/test/java/org/sonatype/security/realms/AbstractRealmWithSecuritySystemTest.java
index bdef8db1..7f9f4d03 100644
--- a/testsupport/nexus-it-helper-plugin/src/test/java/org/sonatype/security/realms/AbstractRealmWithSecuritySystemTest.java
+++ b/testsupport/nexus-it-helper-plugin/src/test/java/org/sonatype/security/realms/AbstractRealmWithSecuritySystemTest.java
@@ -19,7 +19,7 @@ import org.sonatype.security.SecuritySystem;
 import org.sonatype.security.guice.SecurityModule;
 
 import com.google.inject.Module;
-import net.sf.ehcache.CacheManager;
+import com.walmart.warm.hazelcast.HazelcastManager;
 import org.codehaus.plexus.context.Context;
 
 /**
@@ -35,8 +35,6 @@ public abstract class AbstractRealmWithSecuritySystemTest
 {
   private SecuritySystem securitySystem;
 
-  private CacheManager cacheManager;
-
   @Override
   protected void customizeContext(final Context ctx) {
     super.customizeContext(ctx);
@@ -56,7 +54,6 @@ public abstract class AbstractRealmWithSecuritySystemTest
     super.setUp();
 
     securitySystem = lookup(SecuritySystem.class);
-    cacheManager = lookup(CacheManager.class);
   }
 
   protected void tearDown()
@@ -65,9 +62,6 @@ public abstract class AbstractRealmWithSecuritySystemTest
     if (securitySystem != null) {
       securitySystem.stop();
     }
-    if (cacheManager != null) {
-      cacheManager.shutdown();
-    }
     super.tearDown();
   }
 
diff --git a/testsupport/nexus-test-common/src/main/java/org/sonatype/nexus/test/PlexusTestCaseSupport.java b/testsupport/nexus-test-common/src/main/java/org/sonatype/nexus/test/PlexusTestCaseSupport.java
index 25426354..c136aa6a 100644
--- a/testsupport/nexus-test-common/src/main/java/org/sonatype/nexus/test/PlexusTestCaseSupport.java
+++ b/testsupport/nexus-test-common/src/main/java/org/sonatype/nexus/test/PlexusTestCaseSupport.java
@@ -103,7 +103,7 @@ public abstract class PlexusTestCaseSupport
     final String config = getCustomConfigurationName();
 
     final ContainerConfiguration containerConfiguration =
-        new DefaultContainerConfiguration().setName("test").setContext(context.getContextData());
+        new DefaultContainerConfiguration().setName("test").setContext(context.getContextData()).setJSR250Lifecycle(true);
 
     if (config != null) {
       containerConfiguration.setContainerConfiguration(config);
diff --git a/testsupport/nexus-test-harness-launcher/src/main/java/org/sonatype/nexus/integrationtests/TestContainer.java b/testsupport/nexus-test-harness-launcher/src/main/java/org/sonatype/nexus/integrationtests/TestContainer.java
index a2824977..745f89ec 100644
--- a/testsupport/nexus-test-harness-launcher/src/main/java/org/sonatype/nexus/integrationtests/TestContainer.java
+++ b/testsupport/nexus-test-harness-launcher/src/main/java/org/sonatype/nexus/integrationtests/TestContainer.java
@@ -144,6 +144,7 @@ public class TestContainer
     containerConfiguration.setContainerConfiguration(plexusXml);
     containerConfiguration.setAutoWiring(true);
     containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);
+    containerConfiguration.setJSR250Lifecycle(true);
 
     try {
       return new DefaultPlexusContainer(containerConfiguration, modules);
