<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${namespace}">

  <insert id="extendSchema">
    ALTER TABLE maven2_component ADD COLUMN IF NOT EXISTS
        base_version VARCHAR NULL;

    CREATE INDEX IF NOT EXISTS idx_maven2_component_base_version ON maven2_component (base_version);
  </insert>

  <update id="updateBaseVersion" parameterType="Maven2ComponentData">
    UPDATE maven2_component SET base_version = #{baseVersion}
    WHERE<include refid="componentCoordinateMatch"/>;
  </update>

  <select id="findGavsWithSnaphots" resultType="org.sonatype.nexus.content.maven.store.GAV">
    SELECT namespace as "group", name, base_version, COUNT(*) AS count FROM maven2_component
    WHERE repository_id = #{repositoryId} AND base_version LIKE '%-SNAPSHOT'
    GROUP BY namespace, name, base_version
    HAVING COUNT(*) &gt; #{minimumRetained};
  </select>

  <resultMap id="BlobComponentAssetsDataMap"
             type="org.sonatype.nexus.content.maven.store.Maven2ComponentData"
             extends="ComponentAssetsDataMap">
    <collection property="assets"
                javaType="List"
                ofType="org.sonatype.nexus.repository.content.store.AssetData"
                notNullColumn="asset_id"
                fetchType="eager">
      <id property="assetId" column="asset_id"/>
      <result property="componentId" column="component_id"/>
      <result property="assetBlobId" column="asset_blob_id"/>
      <association property="assetBlob" column="blob"
                   javaType="org.sonatype.nexus.repository.content.store.AssetBlobData">
        <id property="assetBlobId" column="asset_blob_id"/>
        <result property="blobCreated" column="blob_created"/>
      </association>
    </collection>
  </resultMap>

  <select id="findComponentsForGav" resultType="Maven2ComponentData" resultMap="BlobComponentAssetsDataMap">
    SELECT c.*, a.asset_id, a.asset_blob_id, b.blob_created
    FROM maven2_component c
           LEFT JOIN maven2_asset as a ON c.component_id = a.component_id
           LEFT JOIN maven2_asset_blob as b ON a.asset_blob_id = b.asset_blob_id
    WHERE (c.name = #{name} AND c.namespace = #{group})
      AND c.repository_id = #{repositoryId}
      AND (c.base_version = #{baseVersion} OR
           c.base_version = #{releaseVersion})
      AND c.base_version LIKE '%-SNAPSHOT'
    ORDER BY version DESC;
  </select>

  <select id="selectSnapshotsAfterRelease" resultType="int">
  SELECT DISTINCT(snapshots.component_id) FROM maven2_component snapshots, maven2_component releases
  WHERE snapshots.repository_id = #{repositoryId}
  AND snapshots.name = releases.name
  AND snapshots.namespace = releases.namespace
  AND snapshots.base_version LIKE '%-SNAPSHOT'
  AND snapshots.last_updated &lt;= (CURRENT_TIMESTAMP - CAST(#{gracePeriod} AS INT) * INTERVAL '1' DAY)
  AND releases.base_version = REPLACE(snapshots.base_version, '-SNAPSHOT', '');
  </select>

  <select id="selectUnusedSnapshots" resultType="Integer">
    SELECT maven2_component.component_id
    FROM maven2_component
           INNER JOIN maven2_asset ON maven2_component.component_id = maven2_asset.component_id
           LEFT JOIN maven2_asset_blob ON maven2_asset.asset_blob_id = maven2_asset_blob.asset_blob_id
    WHERE maven2_component.repository_id = #{repositoryId}
      AND maven2_component.base_version LIKE '%%SNAPSHOT'
    GROUP BY maven2_component.component_id
    HAVING max(coalesce(maven2_asset.last_downloaded, maven2_asset_blob.blob_created)) &lt; #{olderThan}
    ORDER BY maven2_component.component_id
    LIMIT #{limit}
  </select>

  <select id="getBaseVersions" resultType="String">
    SELECT DISTINCT base_version
      FROM maven2_component
     WHERE namespace = #{namespace}
       AND name = #{name}
       AND repository_id = #{repositoryId};
  </select>

  <resultMap id="OrderedComponentAssetsDataMap"
             type="org.sonatype.nexus.repository.content.store.OrderedComponentData"
             extends="ComponentAssetsDataMap">
    <result property="orderedToken" column="orderedToken" />
  </resultMap>

  <!-- Override but myBatis doesn't support it properly, so an 'Ex' suffix is used -->
  <select id="browseComponentsForCleanupEx"
          resultType="org.sonatype.nexus.repository.content.store.OrderedComponentData"
          resultMap="OrderedComponentAssetsDataMap">
    <choose>
      <!-- Only run select if supported criteria are present, otherwise all data may be selected -->
      <when test="criteria.lastDownloaded != null or criteria.lastBlobUpdated != null or criteria.regex != null">
        <choose>
          <when test="includeAssets">
            WITH cleanup_components AS ( <include refid="selectBrowseComponentsForCleanupEx"/> )
            SELECT cleanup_components.orderedToken, component.*, asset.*
            FROM cleanup_components
            LEFT JOIN maven2_component AS component ON component.component_id = cleanup_components.component_id
            LEFT JOIN maven2_asset AS asset ON component.component_id = asset.component_id
            <!-- we still need to maintain the correct order for pagination -->
            <choose>
              <when test="criteria.sortBy == 'version'"> ORDER BY component.normalized_version DESC</when>
              <otherwise> ORDER BY component.component_id</otherwise>
            </choose>
          </when>
          <otherwise><include refid="selectBrowseComponentsForCleanupEx"/></otherwise>
        </choose>
      </when>
      <otherwise>SELECT * FROM maven2_component LIMIT 0</otherwise>
    </choose>
  </select>

  <sql id="selectBrowseComponentsForCleanupEx">
    <choose>
      <when test="includeAssets">SELECT maven2_component.component_id,</when>
      <!-- workaround for asset_id to solve resultmap issues -->
      <otherwise>SELECT maven2_component.*, NULL AS asset_id, </otherwise>
    </choose>
    <choose>
      <when test="criteria.sortBy == 'version'">maven2_component.normalized_version</when>
      <otherwise>maven2_component.component_id</otherwise>
    </choose>
    <!-- We need to select a suitable ORDER BY field as the continuation token -->
     AS orderedToken
    FROM maven2_component

    <if test="criteria.lastDownloaded != null or criteria.lastBlobUpdated != null or criteria.regex != null">
        LEFT OUTER JOIN maven2_asset on maven2_component.component_id = maven2_asset.component_id
    </if>
    <if test="criteria.lastDownloaded != null or criteria.lastBlobUpdated != null">
        LEFT JOIN maven2_asset_blob ON maven2_asset.asset_blob_id = maven2_asset_blob.asset_blob_id
    </if>

    WHERE
    <choose>
      <when test="namespace == null and name == null and criteria.sortBy == null and criteria.retain == null">
       maven2_component.repository_id = #{repositoryId}
      </when>
      <otherwise> <include refid="componentSetMatch"/></otherwise>
    </choose>

    <!-- Distinguish between pre-release or release (or mixed if no criteria set) -->
    <choose>
      <when test="criteria.isPrerelease == 'true'"> AND maven2_component.base_version LIKE '%-SNAPSHOT'</when>
      <when test="criteria.isPrerelease == 'false'"> AND maven2_component.base_version NOT LIKE '%-SNAPSHOT'</when>
      <otherwise/>
    </choose>

    <!-- For Retain-N, the continuation token needs to be compared to normalised_version
     or blob_created depending on sort type -->
    <if test="continuationToken != null">
        <choose>
            <when test="criteria.sortBy == 'version'">
                <![CDATA[
                    AND maven2_component.normalized_version < #{continuationToken}
                ]]>
            </when>
            <otherwise> AND maven2_component.component_id > #{continuationToken}</otherwise>
        </choose>
    </if>
    GROUP BY maven2_component.component_id
    <!-- trim allows us to only include the HAVING keyword and clauses when needed, ensuring removal of AND if there
         is no preceding clause -->
    <trim prefix="HAVING" prefixOverrides="AND ">
      <if test="criteria.lastDownloaded != null">
        <!-- CDATA is used here to enable syntax with <= (less than would otherwise have to be URL-encoded) -->
        <![CDATA[
            (max(coalesce(maven2_asset.last_downloaded, maven2_asset_blob.blob_created))
              <= (now() - interval '${criteria.lastDownloaded} seconds'))
        ]]>
      </if>
      <if test="criteria.lastBlobUpdated != null">
        <![CDATA[
            AND (max(maven2_asset_blob.blob_created) <= (now() - interval '${criteria.lastBlobUpdated} seconds'))
        ]]>
      </if>
      <if test="criteria.regex != null">
        <![CDATA[
            AND bool_or(maven2_asset.path ~ #{criteria.regex})
        ]]>
      </if>
    </trim>
    <!-- For Retain-N, the ORDER BY needs to be normalised_version DESC or blob_created DESC depending on sort type -->
    <choose>
        <when test="criteria.sortBy == 'version'"> ORDER BY maven2_component.normalized_version DESC</when>
        <otherwise> ORDER BY maven2_component.component_id</otherwise>
    </choose>

    <if test="criteria.retain > 0 and continuationToken == null"> OFFSET #{criteria.retain}</if>

    <if test="limit > 0"> LIMIT #{limit}</if>
  </sql>

</mapper>
